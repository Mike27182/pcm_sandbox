#include "pmc.h"
#include <fcntl.h>
#include <unistd.h>
#include <iostream>

using namespace std;

uint64_t read_msr_f( int cpu, uint32_t msr )
{
    char msr_filename[64];
    int fd;
    uint64_t value;

    sprintf( msr_filename, "/dev/cpu/%d/msr", cpu );
    fd = open( msr_filename, O_RDONLY );
    if( fd < 0 )
    {
        perror( "open" );
        exit( 1 );
    }

    if( pread( fd, &value, sizeof value, msr ) != sizeof value)
    {
        perror( "pread" );
        exit( 1 );
    }

    close( fd );
    return value;
}

void write_msr_f( int cpu, uint32_t msr, uint64_t value )
{
    char msr_filename[64];
    int fd;

    sprintf( msr_filename, "/dev/cpu/%d/msr", cpu );
    fd = open( msr_filename, O_WRONLY );
    if( fd < 0 )
    {
        perror( "open" );
        exit( 1 );
    }

    if( pwrite( fd, &value, sizeof value, msr ) != sizeof value )
    {
        perror( "pwrite" );
        exit( 1 );
    }

    close( fd );
}

void enable_counters( uint32_t cpu )
{
    uint64_t fixed_ctr_ctrl_value = 0x333; // Enable Fixed Counter CPL 0 (bit 0), Enable Fixed Counter CPL>0 (bit 1), not count on other thread HT (bit 2), no interrupt on overflow (bit 3)
    uint64_t perf_global_ctrl_value = 0x7000000ff; // Enable pmc0, pmc1 and EN_FIXED_CTR0, EN_FIXED_CTR1, EN_FIXED_CTR2

    constexpr uint32_t IA32_FIXED_CTR_CTRL = 0x38D;
    constexpr uint32_t IA32_PERF_GLOBAL_CTRL = 0x38F;

    write_msr_f( cpu, IA32_FIXED_CTR_CTRL, fixed_ctr_ctrl_value );
    write_msr_f( cpu, IA32_PERF_GLOBAL_CTRL, perf_global_ctrl_value );
}

void setPmc( uint32_t cpu, uint32_t pmc, PmcConfig cfg )
{
    if( pmc>=8 )
        throw;

    uint64_t usr = 1;    // user mode
    uint64_t os = 1;     // kernel mode
    uint64_t enable = 1; // enable counter
    uint64_t pinControl = 0; // PC: Enables pin control
    uint64_t enaInterrupt = 0; // INT: Enables interrupt on counter overflow
    uint64_t msr_value = 
        ( cfg.cmask << 24 ) |
        ( cfg.invert << 23 ) |
        ( enable << 22 ) |
        ( cfg.anyThread << 21 ) |
        ( enaInterrupt << 20 ) |
        ( pinControl << 19 ) |
        ( cfg.edgeDetect << 18 ) |
        ( os << 17 ) |
        ( usr << 16 ) |
        ( cfg.umask << 8 ) |
        ( cfg.eventSelect );

    constexpr uint32_t IA32_PERFEVTSEL0 = 0x186;
    constexpr uint32_t IA32_PMC0 = 0xC1;
    constexpr uint32_t MSR_PEBS_LD_LAT = 0x3F6;
    constexpr uint32_t MSR_PEBS_FRONTEND = 0x3F7;

    write_msr_f( cpu, MSR_PEBS_LD_LAT, cfg.pebs3F6H );
    write_msr_f( cpu, MSR_PEBS_FRONTEND, cfg.pebs3F7H );
    write_msr_f( cpu, IA32_PERFEVTSEL0 + pmc, msr_value );
    write_msr_f( cpu, IA32_PMC0 + pmc, 0 );
}

void pinToCore( uint32_t cpu )
{
    cpu_set_t cpuset;
    CPU_ZERO( &cpuset );
    CPU_SET( cpu, &cpuset );

    pthread_t current_thread = pthread_self();
    int result = pthread_setaffinity_np( current_thread, sizeof( cpu_set_t ), &cpuset );
    if (result != 0)
    {
        cerr << "Error setting thread affinity: " << result << endl;
        exit( 1 );
    }
}

vector<PmcConfig> pmcConfigsRaptorLakePCore =
{
   //  eventSelect,         umask, edgeDetect, anyThread, invert, cmask, pebs3f6, pebs3f7,     offcore,        name,           comment
     { 0xC4,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.ALL_BRANCHES" } // Counts all branch instructions retired. CORE: PCore
   , { 0xC5,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.ALL_BRANCHES" } // Counts all the retired branch instructions that were mispredicted by the processor. A branch misprediction occurs when the processor incorrectly predicts the destination of the branch. When the misprediction is discovered at execution, all the instructions executed in the wrong (speculative) path must be discarded, and the processor must start fetching from the correct path. CORE: PCore
   , { 0x3C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.REF_TSC_P" } // Counts the number of reference cycles when the core is not in a halt state. The core enters the halt state when it is running the HLT instruction or the MWAIT instruction. This event is not affected by core frequency changes (for example, P states, TM2 transitions) but has the same incrementing frequency as the time stamp counter. This event can approximate elapsed time while the core was not in a halt state. It is counted on a dedicated fixed counter, leaving the four (eight when Hyperthreading is disabled) programmable counters available for other events. Note: On all current platforms this event stops counting during 'throttling (TM)' states duty off periods the processor is 'halted'. The counter update is done at a lower clock rate then the core clock the overflow status bit for this counter may appear 'sticky'. After the counter has overflowed and software clears the overflow status bit and resets the counter to less than MAX. The reset value to the counter is not clocked immediately so the overflow status bit will flip 'high (1)' and generate another PMI (if enabled) after which the reset value gets clocked into the counter. Therefore, software will get the interrupt, read the overflow status bit '1 for bit 34 while the counter value is less than MAX. Software should ignore this case. CORE: PCore
   , { 0x3C,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.THREAD_P" } // This is an architectural event that counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling. For this reason, this event may have a changing ratio with regards to wall clock time. CORE: PCore
   , { 0xC0,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.ANY_P" } // Counts the number of X86 instructions retired - an Architectural PerfMon event. Counting continues during hardware interrupts, traps, and inside interrupt handlers. Notes: INST_RETIRED.ANY is counted by a designated fixed counter freeing up programmable counters to count other events. INST_RETIRED.ANY_P is counted by a programmable counter. CORE: PCore
   , { 0x2E,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LONGEST_LAT_CACHE.MISS" } // Counts core-originated cacheable requests that miss the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches to the L1 and L2. It does not include hardware prefetches to the L3, and may not count other types of requests to the L3. CORE: PCore
   , { 0x2E,                0x4F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LONGEST_LAT_CACHE.REFERENCE" } // Counts core-originated cacheable requests to the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches to the L1 and L2. It does not include hardware prefetches to the L3, and may not count other types of requests to the L3. CORE: PCore
   , { 0xA4,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN.SLOTS_P" } // Counts the number of available slots for an unhalted logical processor. The event increments by machine-width of the narrowest pipeline as employed by the Top-down Microarchitecture Analysis method. The count is distributed among unhalted logical processors (hyper-threads) who share the same physical core. CORE: PCore
   , { 0xB0,                0x09,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.DIV_ACTIVE" } // Counts cycles when divide unit is busy executing divide or square root operations. Accounts for integer and floating-point operations. CORE: PCore
   , { 0xB0,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.FPDIV_ACTIVE" } // ARITH.FPDIV_ACTIVE CORE: PCore
   , { 0xB0,                0x08,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.IDIV_ACTIVE" } // This event counts the cycles the integer divider is busy. CORE: PCore
   , { 0xC1,                0x1B,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ASSISTS.ANY" } // Counts the number of occurrences where a microcode assist is invoked by hardware. Examples include AD (page Access Dirty), FP and AVX related assists. CORE: PCore
   , { 0xC1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ASSISTS.FP" } // Counts all microcode Floating Point assists. CORE: PCore
   , { 0xC1,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ASSISTS.HARDWARE" } // ASSISTS.HARDWARE CORE: PCore
   , { 0xC1,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ASSISTS.PAGE_FAULT" } // ASSISTS.PAGE_FAULT CORE: PCore
   , { 0xC1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ASSISTS.SSE_AVX_MIX" } // ASSISTS.SSE_AVX_MIX CORE: PCore
   , { 0x60,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BACLEARS.ANY" } // Number of times the front-end is resteered when it finds a branch instruction in a fetch line. This is called Unknown Branch which occurs for the first time a branch instruction is fetched or when the branch is not tracked by the BPU (Branch Prediction Unit) anymore. CORE: PCore
   , { 0xC4,                0x11,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.COND" } // Counts conditional branch instructions retired. CORE: PCore
   , { 0xC4,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.COND_NTAKEN" } // Counts not taken branch instructions retired. CORE: PCore
   , { 0xC4,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.COND_TAKEN" } // Counts taken conditional branch instructions retired. CORE: PCore
   , { 0xC4,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.FAR_BRANCH" } // Counts far branch instructions retired. CORE: PCore
   , { 0xC4,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.INDIRECT" } // Counts near indirect branch instructions retired excluding returns. TSX abort is an indirect branch. CORE: PCore
   , { 0xC4,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_CALL" } // Counts both direct and indirect near call instructions retired. CORE: PCore
   , { 0xC4,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_RETURN" } // Counts return instructions retired. CORE: PCore
   , { 0xC4,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_TAKEN" } // Counts taken branch instructions retired. CORE: PCore
   , { 0xC5,                0x11,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.COND" } // Counts mispredicted conditional branch instructions retired. CORE: PCore
   , { 0xC5,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.COND_NTAKEN" } // Counts the number of conditional branch instructions retired that were mispredicted and the branch direction was not taken. CORE: PCore
   , { 0xC5,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.COND_TAKEN" } // Counts taken conditional mispredicted branch instructions retired. CORE: PCore
   , { 0xC5,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.INDIRECT" } // Counts miss-predicted near indirect branch instructions retired excluding returns. TSX abort is an indirect branch. CORE: PCore
   , { 0xC5,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.INDIRECT_CALL" } // Counts retired mispredicted indirect (near taken) CALL instructions, including both register and memory indirect. CORE: PCore
   , { 0xC5,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NEAR_TAKEN" } // Counts number of near branch instructions retired that were mispredicted and taken. CORE: PCore
   , { 0xC5,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.RET" } // This is a non-precise version (that is, does not use PEBS) of the event that counts mispredicted return instructions retired. CORE: PCore
   , { 0x28,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CORE_POWER.LICENSE_1" } // CORE_POWER.LICENSE_1 CORE: PCore
   , { 0x28,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CORE_POWER.LICENSE_2" } // CORE_POWER.LICENSE_2 CORE: PCore
   , { 0x28,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CORE_POWER.LICENSE_3" } // CORE_POWER.LICENSE_3 CORE: PCore
   , { 0xEC,                0x70,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.C0_WAIT" } // Counts core clocks when the thread is in the C0.1 or C0.2 power saving optimized states (TPAUSE or UMWAIT instructions) or running the PAUSE instruction. CORE: PCore
   , { 0xEC,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.C01" } // Counts core clocks when the thread is in the C0.1 light-weight slower wakeup time but more power saving optimized state. This state can be entered via the TPAUSE or UMWAIT instructions. CORE: PCore
   , { 0xEC,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.C02" } // Counts core clocks when the thread is in the C0.2 light-weight faster wakeup time but less power saving optimized state. This state can be entered via the TPAUSE or UMWAIT instructions. CORE: PCore
   , { 0xEC,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.DISTRIBUTED" } // This event distributes cycle counts between active hyperthreads, i.e., those in C0. A hyperthread becomes inactive when it executes the HLT or MWAIT instructions. If all other hyperthreads are inactive (or disabled or do not exist), all counts are attributed to this hyperthread. To obtain the full count when the Core is active, sum the counts from each hyperthread. CORE: PCore
   , { 0x3C,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE" } // Counts Core crystal clock cycles when current thread is unhalted and the other thread is halted. CORE: PCore
   , { 0xEC,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.PAUSE" } // CPU_CLK_UNHALTED.PAUSE CORE: PCore
   , { 0xEC,                0x40,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.PAUSE_INST" } // CPU_CLK_UNHALTED.PAUSE_INST CORE: PCore
   , { 0x3C,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.REF_DISTRIBUTED" } // This event distributes Core crystal clock cycle counts between active hyperthreads, i.e., those in C0 sleep-state. A hyperthread becomes inactive when it executes the HLT or MWAIT instructions. If one thread is active in a core, all counts are attributed to this hyperthread. To obtain the full count when the Core is active, sum the counts from each hyperthread. CORE: PCore
   , { 0xA3,                0x08,  0,          0,         0,      0x08,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_L1D_MISS" } // Cycles while L1 cache miss demand load is outstanding. CORE: PCore
   , { 0xA3,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_L2_MISS" } // Cycles while L2 cache miss demand load is outstanding. CORE: PCore
   , { 0xA3,                0x10,  0,          0,         0,      0x10,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_MEM_ANY" } // Cycles while memory subsystem has an outstanding load. CORE: PCore
   , { 0xA3,                0x0C,  0,          0,         0,      0x0C,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_L1D_MISS" } // Execution stalls while L1 cache miss demand load is outstanding. CORE: PCore
   , { 0xA3,                0x05,  0,          0,         0,      0x05,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_L2_MISS" } // Execution stalls while L2 cache miss demand load is outstanding. CORE: PCore
   , { 0xA3,                0x06,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_L3_MISS" } // Execution stalls while L3 cache miss demand load is outstanding. CORE: PCore
   , { 0xA3,                0x04,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_TOTAL" } // Total execution stalls. CORE: PCore
   , { 0x87,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DECODE.LCP" } // Counts cycles that the Instruction Length decoder (ILD) stalls occurred due to dynamically changing prefix length of the decoded instruction (by operand size prefix instruction 0x66, address size prefix instruction 0x67 or REX.W for Intel64). Count is proportional to the number of prefixes in a 16B-line. This may result in a three-cycle penalty for each LCP (Length changing prefix) in a 16-byte chunk. CORE: PCore
   , { 0x87,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DECODE.MS_BUSY" } // Cycles the Microcode Sequencer is busy. CORE: PCore
   , { 0x61,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DSB2MITE_SWITCHES.PENALTY_CYCLES" } // Decode Stream Buffer (DSB) is a Uop-cache that holds translations of previously fetched instructions that were decoded by the legacy x86 decode pipeline (MITE). This event counts fetch penalty cycles when a transition occurs from DSB to MITE. CORE: PCore
   , { 0x12,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.STLB_HIT" } // Counts loads that miss the DTLB (Data TLB) and hit the STLB (Second level TLB). CORE: PCore
   , { 0x12,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_ACTIVE" } // Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a demand load. CORE: PCore
   , { 0x12,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED" } // Counts completed page walks (all page sizes) caused by demand data loads. This implies it missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x12,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED_1G" } // Counts completed page walks (1G sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x12,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M" } // Counts completed page walks (2M/4M sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x12,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED_4K" } // Counts completed page walks (4K sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x12,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_PENDING" } // Counts the number of page walks outstanding for a demand load in the PMH (Page Miss Handler) each cycle. CORE: PCore
   , { 0x13,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.STLB_HIT" } // Counts stores that miss the DTLB (Data TLB) and hit the STLB (2nd Level TLB). CORE: PCore
   , { 0x13,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_ACTIVE" } // Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a store. CORE: PCore
   , { 0x13,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED" } // Counts completed page walks (all page sizes) caused by demand data stores. This implies it missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x13,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED_1G" } // Counts completed page walks (1G sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x13,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M" } // Counts completed page walks (2M/4M sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x13,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED_4K" } // Counts completed page walks (4K sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x13,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_PENDING" } // Counts the number of page walks outstanding for a store in the PMH (Page Miss Handler) each cycle. CORE: PCore
   , { 0xA6,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.1_PORTS_UTIL" } // Counts cycles during which a total of 1 uop was executed on all ports and Reservation Station (RS) was not empty. CORE: PCore
   , { 0xA6,                0x0C,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.2_3_PORTS_UTIL" } // Cycles total of 2 or 3 uops are executed on all ports and Reservation Station (RS) was not empty. CORE: PCore
   , { 0xA6,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.2_PORTS_UTIL" } // Counts cycles during which a total of 2 uops were executed on all ports and Reservation Station (RS) was not empty. CORE: PCore
   , { 0xA6,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.3_PORTS_UTIL" } // Cycles total of 3 uops are executed on all ports and Reservation Station (RS) was not empty. CORE: PCore
   , { 0xA6,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.4_PORTS_UTIL" } // Cycles total of 4 uops are executed on all ports and Reservation Station (RS) was not empty. CORE: PCore
   , { 0xA6,                0x21,  0,          0,         0,      0x05,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.BOUND_ON_LOADS" } // Execution stalls while memory subsystem has an outstanding load. CORE: PCore
   , { 0xA6,                0x40,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.BOUND_ON_STORES" } // Counts cycles where the Store Buffer was full and no loads caused an execution stall. CORE: PCore
   , { 0xA6,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.EXE_BOUND_0_PORTS" } // Number of cycles total of 0 uops executed on all ports, Reservation Station (RS) was not empty, the Store Buffer (SB) was not full and there was no outstanding load. CORE: PCore
   , { 0xB3,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_DISPATCHED.PORT_0" } // FP_ARITH_DISPATCHED.PORT_0 CORE: PCore
   , { 0xB3,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_DISPATCHED.PORT_1" } // FP_ARITH_DISPATCHED.PORT_1 CORE: PCore
   , { 0xB3,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_DISPATCHED.PORT_5" } // FP_ARITH_DISPATCHED.PORT_5 CORE: PCore
   , { 0xC7,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE" } // Number of SSE/AVX computational 128-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 2 computation operations, one for each element. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE" } // Number of SSE/AVX computational 128-bit packed single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 4 computation operations, one for each element. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE" } // Number of SSE/AVX computational 256-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 4 computation operations, one for each element. Applies to SSE* and AVX* packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE" } // Number of SSE/AVX computational 256-bit packed single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 8 computation operations, one for each element. Applies to SSE* and AVX* packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x18,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.4_FLOPS" } // Number of SSE/AVX computational 128-bit packed single precision and 256-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 2 or/and 4 computation operations, one for each element. Applies to SSE* and AVX* packed single precision floating-point and packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX RCP14 RSQRT14 SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x03,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.SCALAR" } // Number of SSE/AVX computational scalar single precision and double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SSE* and AVX* scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.SCALAR_DOUBLE" } // Number of SSE/AVX computational scalar double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SSE* and AVX* scalar double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.SCALAR_SINGLE" } // Number of SSE/AVX computational scalar single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SSE* and AVX* scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC7,                0xFC,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.VECTOR" } // Number of any Vector retired FP arithmetic instructions. The DAZ and FTZ flags in the MXCSR register need to be set when using these events. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000001,    0x000000000000, "FRONTEND_RETIRED.ANY_DSB_MISS" } // Counts retired Instructions that experienced DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000011,    0x000000000000, "FRONTEND_RETIRED.DSB_MISS" } // Number of retired Instructions that experienced a critical DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. Critical means stalls were exposed to the back-end as a result of the DSB miss. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000014,    0x000000000000, "FRONTEND_RETIRED.ITLB_MISS" } // Counts retired Instructions that experienced iTLB (Instruction TLB) true miss. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000012,    0x000000000000, "FRONTEND_RETIRED.L1I_MISS" } // Counts retired Instructions who experienced Instruction L1 Cache true miss. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000013,    0x000000000000, "FRONTEND_RETIRED.L2_MISS" } // Counts retired Instructions who experienced Instruction L2 Cache true miss. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x600106,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_1" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of at least 1 cycle which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x608006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_128" } // Counts retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 128 cycles which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x601006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_16" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 16 cycles. During this period the front-end delivered no uops. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x600206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of at least 2 cycles which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x100206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1" } // Counts retired instructions that are delivered to the back-end after the front-end had at least 1 bubble-slot for a period of 2 cycles. A bubble-slot is an empty issue-pipeline slot while there was no RAT stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x610006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_256" } // Counts retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 256 cycles which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x602006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_32" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 32 cycles. During this period the front-end delivered no uops. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x600406,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_4" } // Counts retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 4 cycles which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x620006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_512" } // Counts retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 512 cycles which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x604006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_64" } // Counts retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 64 cycles which was not interrupted by a back-end stall. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x600806,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_8" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 8 cycles. During this period the front-end delivered no uops. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000008,    0x000000000000, "FRONTEND_RETIRED.MS_FLOWS" } // FRONTEND_RETIRED.MS_FLOWS CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000015,    0x000000000000, "FRONTEND_RETIRED.STLB_MISS" } // Counts retired Instructions that experienced STLB (2nd level TLB) true miss. CORE: PCore
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000017,    0x000000000000, "FRONTEND_RETIRED.UNKNOWN_BRANCH" } // FRONTEND_RETIRED.UNKNOWN_BRANCH CORE: PCore
   , { 0x80,                0x04,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ICACHE_DATA.STALL_PERIODS" } // ICACHE_DATA.STALL_PERIODS CORE: PCore
   , { 0x80,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE_DATA.STALLS" } // Counts cycles where a code line fetch is stalled due to an L1 instruction cache miss. The decode pipeline works at a 32 Byte granularity. CORE: PCore
   , { 0x83,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE_TAG.STALLS" } // Counts cycles where a code fetch is stalled due to L1 instruction cache tag miss. CORE: PCore
   , { 0x79,                0x08,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.DSB_CYCLES_ANY" } // Counts the number of cycles uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. CORE: PCore
   , { 0x79,                0x08,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "IDQ.DSB_CYCLES_OK" } // Counts the number of cycles where optimal number of uops was delivered to the Instruction Decode Queue (IDQ) from the DSB (Decode Stream Buffer) path. Count includes uops that may 'bypass' the IDQ. CORE: PCore
   , { 0x79,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.DSB_UOPS" } // Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. CORE: PCore
   , { 0x79,                0x04,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MITE_CYCLES_ANY" } // Counts the number of cycles uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB). CORE: PCore
   , { 0x79,                0x04,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "IDQ.MITE_CYCLES_OK" } // Counts the number of cycles where optimal number of uops was delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB). CORE: PCore
   , { 0x79,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.MITE_UOPS" } // Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the MITE path. This also means that uops are not being delivered from the Decode Stream Buffer (DSB). CORE: PCore
   , { 0x79,                0x20,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MS_CYCLES_ANY" } // Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE. CORE: PCore
   , { 0x79,                0x20,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MS_SWITCHES" } // Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer. CORE: PCore
   , { 0x79,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.MS_UOPS" } // Counts the total number of uops delivered by the Microcode Sequencer (MS). CORE: PCore
   , { 0x9C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CORE" } // Counts the number of uops not delivered to by the Instruction Decode Queue (IDQ) to the back-end of the pipeline when there was no back-end stalls. This event counts for one SMT thread in a given cycle. CORE: PCore
   , { 0x9C,                0x01,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE" } // Counts the number of cycles when no uops were delivered by the Instruction Decode Queue (IDQ) to the back-end of the pipeline when there was no back-end stalls. This event counts for one SMT thread in a given cycle. CORE: PCore
   , { 0x9C,                0x01,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK" } // Counts the number of cycles when the optimal number of uops were delivered by the Instruction Decode Queue (IDQ) to the back-end of the pipeline when there was no back-end stalls. This event counts for one SMT thread in a given cycle. CORE: PCore
   , { 0x75,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_DECODED.DECODERS" } // Number of decoders utilized in a cycle when the MITE (legacy decode pipeline) fetches instructions. CORE: PCore
   , { 0xC0,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.MACRO_FUSED" } // INST_RETIRED.MACRO_FUSED CORE: PCore
   , { 0xC0,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.NOP" } // Counts all retired NOP or ENDBR32/64 instructions CORE: PCore
   , { 0xC0,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.REP_ITERATION" } // Number of iterations of Repeat (REP) string retired instructions such as MOVS, CMPS, and SCAS. Each has a byte, word, and doubleword version and string instructions can be repeated using a repetition prefix, REP, that allows their architectural execution to be repeated a number of times as specified by the RCX register. Note the number of iterations is implementation-dependent. CORE: PCore
   , { 0xAD,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_MISC.CLEAR_RESTEER_CYCLES" } // Cycles after recovery from a branch misprediction or machine clear till the first uop is issued from the resteered path. CORE: PCore
   , { 0xAD,                0x01,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "INT_MISC.CLEARS_COUNT" } // Counts the number of speculative clears due to any type of branch misprediction or machine clears CORE: PCore
   , { 0xAD,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_MISC.RECOVERY_CYCLES" } // Counts core cycles when the Resource allocator was stalled due to recovery from an earlier branch misprediction or machine clear event. CORE: PCore
   , { 0xAD,                0x40,  0,          0,         0,      0x00,  0x000,   0x000007,    0x000000000000, "INT_MISC.UNKNOWN_BRANCH_CYCLES" } // Bubble cycles of BAClear (Unknown Branch). CORE: PCore
   , { 0xAD,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_MISC.UOP_DROPPING" } // Estimated number of Top-down Microarchitecture Analysis slots that got dropped due to non front-end reasons CORE: PCore
   , { 0xE7,                0x13,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.128BIT" } // INT_VEC_RETIRED.128BIT CORE: PCore
   , { 0xE7,                0xAC,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.256BIT" } // INT_VEC_RETIRED.256BIT CORE: PCore
   , { 0xE7,                0x03,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.ADD_128" } // Number of retired integer ADD/SUB (regular or horizontal), SAD 128-bit vector instructions. CORE: PCore
   , { 0xE7,                0x0C,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.ADD_256" } // Number of retired integer ADD/SUB (regular or horizontal), SAD 256-bit vector instructions. CORE: PCore
   , { 0xE7,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.MUL_256" } // INT_VEC_RETIRED.MUL_256 CORE: PCore
   , { 0xE7,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.SHUFFLES" } // INT_VEC_RETIRED.SHUFFLES CORE: PCore
   , { 0xE7,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.VNNI_128" } // INT_VEC_RETIRED.VNNI_128 CORE: PCore
   , { 0xE7,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_VEC_RETIRED.VNNI_256" } // INT_VEC_RETIRED.VNNI_256 CORE: PCore
   , { 0x11,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.STLB_HIT" } // Counts instruction fetch requests that miss the ITLB (Instruction TLB) and hit the STLB (Second-level TLB). CORE: PCore
   , { 0x11,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_ACTIVE" } // Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a code (instruction fetch) request. CORE: PCore
   , { 0x11,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED" } // Counts completed page walks (all page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x11,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED_2M_4M" } // Counts completed page walks (2M/4M page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x11,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED_4K" } // Counts completed page walks (4K page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault. CORE: PCore
   , { 0x11,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_PENDING" } // Counts the number of page walks outstanding for an outstanding code (instruction fetch) request in the PMH (Page Miss Handler) each cycle. CORE: PCore
   , { 0x51,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D.HWPF_MISS" } // L1D.HWPF_MISS CORE: PCore
   , { 0x51,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D.REPLACEMENT" } // Counts L1D data line replacements including opportunistic replacements, and replacements that require stall-for-replace or block-for-replace. CORE: PCore
   , { 0x48,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.FB_FULL" } // Counts number of cycles a demand request has waited due to L1D Fill Buffer (FB) unavailability. Demand requests include cacheable/uncacheable demand load, store, lock or SW prefetch accesses. CORE: PCore
   , { 0x48,                0x02,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.FB_FULL_PERIODS" } // Counts number of phases a demand request has waited due to L1D Fill Buffer (FB) unavailability. Demand requests include cacheable/uncacheable demand load, store, lock or SW prefetch accesses. CORE: PCore
   , { 0x48,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.L2_STALLS" } // Counts number of cycles a demand request has waited due to L1D due to lack of L2 resources. Demand requests include cacheable/uncacheable demand load, store, lock or SW prefetch accesses. CORE: PCore
   , { 0x48,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.PENDING" } // Counts number of L1D misses that are outstanding in each cycle, that is each cycle the number of Fill Buffers (FB) outstanding required by Demand Reads. FB either is held by demand loads, or it is held by non-demand loads and gets hit at least once by demand. The valid outstanding interval is defined until the FB deallocation by one of the following ways: from FB allocation, if FB is allocated by demand from the demand Hit FB, if it is allocated by hardware or software prefetch. Note: In the L1D, a Demand Read contains cacheable or noncacheable demand loads, including ones causing cache-line splits and reads due to page walks resulted from any request type. CORE: PCore
   , { 0x48,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.PENDING_CYCLES" } // Counts duration of L1D miss outstanding in cycles. CORE: PCore
   , { 0x25,                0x1F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_IN.ALL" } // Counts the number of L2 cache lines filling the L2. Counting does not cover rejects. CORE: PCore
   , { 0x26,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_OUT.USELESS_HWPF" } // Counts the number of cache lines that have been prefetched by the L2 hardware prefetcher but not used by demand access when evicted from the L2 cache CORE: PCore
   , { 0x24,                0xE4,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_CODE_RD" } // Counts the total number of L2 code requests. CORE: PCore
   , { 0x24,                0xE1,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_DEMAND_DATA_RD" } // Counts Demand Data Read requests accessing the L2 cache. These requests may hit or miss L2 cache. True-miss exclude misses that were merged with ongoing L2 misses. An access is counted once. CORE: PCore
   , { 0x24,                0x27,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_DEMAND_MISS" } // Counts demand requests that miss L2 cache. CORE: PCore
   , { 0x24,                0xF0,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_HWPF" } // L2_RQSTS.ALL_HWPF CORE: PCore
   , { 0x24,                0xE2,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_RFO" } // Counts the total number of RFO (read for ownership) requests to L2 cache. L2 RFO requests include both L1D demand RFO misses as well as L1D RFO prefetches. CORE: PCore
   , { 0x24,                0xC4,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.CODE_RD_HIT" } // Counts L2 cache hits when fetching instructions, code reads. CORE: PCore
   , { 0x24,                0x24,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.CODE_RD_MISS" } // Counts L2 cache misses when fetching instructions. CORE: PCore
   , { 0x24,                0xC1,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.DEMAND_DATA_RD_HIT" } // Counts the number of demand Data Read requests initiated by load instructions that hit L2 cache. CORE: PCore
   , { 0x24,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.DEMAND_DATA_RD_MISS" } // Counts demand Data Read requests with true-miss in the L2 cache. True-miss excludes misses that were merged with ongoing L2 misses. An access is counted once. CORE: PCore
   , { 0x24,                0x30,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.HWPF_MISS" } // L2_RQSTS.HWPF_MISS CORE: PCore
   , { 0x24,                0x3F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.MISS" } // Counts read requests of any type with true-miss in the L2 cache. True-miss excludes L2 misses that were merged with ongoing L2 misses. CORE: PCore
   , { 0x24,                0xFF,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.REFERENCES" } // Counts all requests that were hit or true misses in L2 cache. True-miss excludes misses that were merged with ongoing L2 misses. CORE: PCore
   , { 0x24,                0xC2,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.RFO_HIT" } // Counts the RFO (Read-for-Ownership) requests that hit L2 cache. CORE: PCore
   , { 0x24,                0x22,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.RFO_MISS" } // Counts the RFO (Read-for-Ownership) requests that miss L2 cache. CORE: PCore
   , { 0x24,                0xC8,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.SWPF_HIT" } // Counts Software prefetch requests that hit the L2 cache. Accounts for PREFETCHNTA and PREFETCHT0/1/2 instructions when FB is not full. CORE: PCore
   , { 0x24,                0x28,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.SWPF_MISS" } // Counts Software prefetch requests that miss the L2 cache. Accounts for PREFETCHNTA and PREFETCHT0/1/2 instructions when FB is not full. CORE: PCore
   , { 0x23,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_TRANS.L2_WB" } // Counts L2 writebacks that access L2 cache. CORE: PCore
   , { 0x03,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.ADDRESS_ALIAS" } // Counts the number of times a load got blocked due to false dependencies in MOB due to partial compare on address. CORE: PCore
   , { 0x03,                0x88,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.NO_SR" } // Counts the number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use. CORE: PCore
   , { 0x03,                0x82,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.STORE_FORWARD" } // Counts the number of times where store forwarding was prevented for a load operation. The most common case is a load blocked due to the address of memory access (partially) overlapping with a preceding uncompleted store. Note: See the table of not supported store forwards in the Optimization Guide. CORE: PCore
   , { 0x4C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LOAD_HIT_PREFETCH.SWPF" } // Counts all not software-prefetch load dispatches that hit the fill buffer (FB) allocated for the software prefetch. It can also be incremented by some lock instructions. So it should only be used with profiling so that the locks can be excluded by ASM (Assembly File) inspection of the nearby instructions. CORE: PCore
   , { 0xA8,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "LSD.CYCLES_ACTIVE" } // Counts the cycles when at least one uop is delivered by the LSD (Loop-stream detector). CORE: PCore
   , { 0xA8,                0x01,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "LSD.CYCLES_OK" } // Counts the cycles when optimal number of uops is delivered by the LSD (Loop-stream detector). CORE: PCore
   , { 0xA8,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LSD.UOPS" } // Counts the number of uops delivered to the back-end by the LSD(Loop Stream Detector). CORE: PCore
   , { 0xC3,                0x01,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.COUNT" } // Counts the number of machine clears (nukes) of any type. CORE: PCore
   , { 0xC3,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.MEMORY_ORDERING" } // Counts the number of Machine Clears detected dye to memory ordering. Memory Ordering Machine Clears may apply when a memory read may not conform to the memory ordering rules of the x86 architecture CORE: PCore
   , { 0xC3,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.SMC" } // Counts self-modifying code (SMC) detected, which causes a machine clear. CORE: PCore
   , { 0xD0,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ALL_LOADS" } // Counts all retired load instructions. This event accounts for SW prefetch instructions of PREFETCHNTA or PREFETCHT0/1/2 or PREFETCHW. CORE: PCore
   , { 0xD0,                0x82,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ALL_STORES" } // Counts all retired store instructions. CORE: PCore
   , { 0xD0,                0x83,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ANY" } // Counts all retired memory instructions - loads and stores. CORE: PCore
   , { 0xD0,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.LOCK_LOADS" } // Counts retired load instructions with locked access. CORE: PCore
   , { 0xD0,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.SPLIT_LOADS" } // Counts retired load instructions that split across a cacheline boundary. CORE: PCore
   , { 0xD0,                0x42,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.SPLIT_STORES" } // Counts retired store instructions that split across a cacheline boundary. CORE: PCore
   , { 0xD0,                0x11,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.STLB_MISS_LOADS" } // Number of retired load instructions that (start a) miss in the 2nd-level TLB (STLB). CORE: PCore
   , { 0xD0,                0x12,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.STLB_MISS_STORES" } // Number of retired store instructions that (start a) miss in the 2nd-level TLB (STLB). CORE: PCore
   , { 0x43,                0xFD,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_COMPLETED.L1_MISS_ANY" } // Number of completed demand load requests that missed the L1 data cache including shadow misses (FB hits, merge to an ongoing L1D miss) CORE: PCore
   , { 0xD2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_FWD" } // Counts retired load instructions whose data sources were HitM responses from shared L3. CORE: PCore
   , { 0xD2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_HIT" } // Counts retired load instructions whose data sources were L3 and cross-core snoop hits in on-pkg core cache. CORE: PCore
   , { 0xD2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_HITM" } // Counts retired load instructions whose data sources were HitM responses from shared L3. CORE: PCore
   , { 0xD2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS" } // Counts the retired load instructions whose data sources were L3 hit and cross-core snoop missed in on-pkg core cache. CORE: PCore
   , { 0xD2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_NO_FWD" } // Counts retired load instructions whose data sources were L3 and cross-core snoop hits in on-pkg core cache. CORE: PCore
   , { 0xD2,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE" } // Counts retired load instructions whose data sources were hits in L3 without snoops required. CORE: PCore
   , { 0xD3,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_MISS_RETIRED.LOCAL_DRAM" } // Retired load instructions which data sources missed L3 but serviced from local DRAM. CORE: PCore
   , { 0xD4,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_MISC_RETIRED.UC" } // Retired instructions with at least one load to uncacheable memory-type, or at least one cache-line split locked access (Bus Lock). CORE: PCore
   , { 0xD1,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.FB_HIT" } // Counts retired load instructions with at least one uop was load missed in L1 but hit FB (Fill Buffers) due to preceding miss to the same cache line with data not ready. CORE: PCore
   , { 0xD1,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L1_HIT" } // Counts retired load instructions with at least one uop that hit in the L1 data cache. This event includes all SW prefetches and lock instructions regardless of the data source. CORE: PCore
   , { 0xD1,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L1_MISS" } // Counts retired load instructions with at least one uop that missed in the L1 cache. CORE: PCore
   , { 0xD1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L2_HIT" } // Counts retired load instructions with L2 cache hits as data sources. CORE: PCore
   , { 0xD1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L2_MISS" } // Counts retired load instructions missed L2 cache as data sources. CORE: PCore
   , { 0xD1,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L3_HIT" } // Counts retired load instructions with at least one uop that hit in the L3 cache. CORE: PCore
   , { 0xD1,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L3_MISS" } // Counts retired load instructions with at least one uop that missed in the L3 cache. CORE: PCore
   , { 0x44,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_STORE_RETIRED.L2_HIT" } // MEM_STORE_RETIRED.L2_HIT CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x400,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_1024" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 1024 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x080,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 128 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x010,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 16 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x100,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 256 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x020,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 32 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x004,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 4 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x200,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 512 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x040,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 64 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x008,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 8 cycles. Reported latency may be longer than just the memory latency. CORE: PCore
   , { 0xCD,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.STORE_SAMPLE" } // Counts Retired memory accesses with at least 1 store operation. This PEBS event is the precisely-distributed (PDist) trigger covering all stores uops for sampling by the PEBS Store Latency Facility. The facility is described in Intel SDM Volume 3 section 19.9.8 CORE: PCore
   , { 0xE5,                0x03,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_UOP_RETIRED.ANY" } // Number of retired micro-operations (uops) for load or store memory accesses CORE: PCore
   , { 0x47,                0x02,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "MEMORY_ACTIVITY.CYCLES_L1D_MISS" } // Cycles while L1 cache miss demand load is outstanding. CORE: PCore
   , { 0x47,                0x03,  0,          0,         0,      0x03,  0x000,   0x000000,    0x000000000000, "MEMORY_ACTIVITY.STALLS_L1D_MISS" } // Execution stalls while L1 cache miss demand load is outstanding. CORE: PCore
   , { 0x47,                0x05,  0,          0,         0,      0x05,  0x000,   0x000000,    0x000000000000, "MEMORY_ACTIVITY.STALLS_L2_MISS" } // Execution stalls while L2 cache miss demand cacheable load request is outstanding (will not count for uncacheable demand requests e.g. bus lock). CORE: PCore
   , { 0x47,                0x09,  0,          0,         0,      0x09,  0x000,   0x000000,    0x000000000000, "MEMORY_ACTIVITY.STALLS_L3_MISS" } // Execution stalls while L3 cache miss demand cacheable load request is outstanding (will not count for uncacheable demand requests e.g. bus lock). CORE: PCore
   , { 0xCC,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MISC_RETIRED.LBR_INSERTS" } // Increments when an entry is added to the Last Branch Record (LBR) array (or removed from the array in case of RETURNs in call stack mode). The event requires LBR enable via IA32_DEBUGCTL MSR and branch type selection via MSR_LBR_SELECT. CORE: PCore
   , { 0xE0,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MISC2_RETIRED.LFENCE" } // number of LFENCE retired instructions CORE: PCore
   , { 0x21,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.ALL_REQUESTS" } // OFFCORE_REQUESTS.ALL_REQUESTS CORE: PCore
   , { 0x21,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DATA_RD" } // Counts the demand and prefetch data reads. All Core Data Reads include cacheable 'Demands' and L2 prefetchers (not L3 prefetchers). Counting also covers reads due to page walks resulted from any request type. CORE: PCore
   , { 0x21,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DEMAND_CODE_RD" } // Counts both cacheable and non-cacheable code read requests. CORE: PCore
   , { 0x21,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DEMAND_DATA_RD" } // Counts the Demand Data Read requests sent to uncore. Use it in conjunction with OFFCORE_REQUESTS_OUTSTANDING to determine average latency in the uncore. CORE: PCore
   , { 0x21,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DEMAND_RFO" } // Counts the demand RFO (read for ownership) requests including regular RFOs, locks, ItoM. CORE: PCore
   , { 0x21,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.L3_MISS_DEMAND_DATA_RD" } // Counts demand data read requests that miss the L3 cache. CORE: PCore
   , { 0x20,                0x08,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD" } // OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD CORE: PCore
   , { 0x20,                0x02,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_CODE_RD" } // Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS. CORE: PCore
   , { 0x20,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD" } // Cycles where at least 1 outstanding demand data read request is pending. CORE: PCore
   , { 0x20,                0x04,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO" } // OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO CORE: PCore
   , { 0x20,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DATA_RD" } // OFFCORE_REQUESTS_OUTSTANDING.DATA_RD CORE: PCore
   , { 0x20,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD" } // Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS. CORE: PCore
   , { 0x20,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD" } // For every cycle, increments by the number of outstanding demand data read requests pending. Requests are considered outstanding from the time they miss the core's L2 cache until the transaction completion message is sent to the requestor. CORE: PCore
   , { 0x20,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD" } // For every cycle, increments by the number of demand data read requests pending that are known to have missed the L3 cache. Note that this does not capture all elapsed cycles while requests are outstanding - only cycles from when the requests were known by the requesting core to have missed the L3 cache. CORE: PCore
   , { 0xA2,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RESOURCE_STALLS.SB" } // Counts allocation stall cycles caused by the store buffer (SB) being full. This counts cycles that the pipeline back-end blocked uop delivery from the front-end. CORE: PCore
   , { 0xA2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RESOURCE_STALLS.SCOREBOARD" } // Counts cycles where the pipeline is stalled due to serializing operations. CORE: PCore
   , { 0xA5,                0x07,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RS.EMPTY" } // Counts cycles during which the reservation station (RS) is empty for this logical processor. This is usually caused when the front-end pipeline runs into starvation periods (e.g. branch mispredictions or i-cache misses) CORE: PCore
   , { 0xA5,                0x07,  1,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "RS.EMPTY_COUNT" } // Counts end of periods where the Reservation Station (RS) was empty. Could be useful to closely sample on front-end latency issues (see the FRONTEND_RETIRED event of designated precise events) CORE: PCore
   , { 0xA5,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RS.EMPTY_RESOURCE" } // Cycles when Reservation Station (RS) is empty due to a resource in the back-end CORE: PCore
   , { 0x2C,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SQ_MISC.BUS_LOCK" } // Counts the more expensive bus lock needed to enforce cache coherency for certain memory accesses that need to be done atomically. Can be created by issuing an atomic instruction (via the LOCK prefix) which causes a cache line split or accesses uncacheable memory. CORE: PCore
   , { 0x40,                0x0F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.ANY" } // Counts the number of PREFETCHNTA, PREFETCHW, PREFETCHT0, PREFETCHT1 or PREFETCHT2 instructions executed. CORE: PCore
   , { 0x40,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.NTA" } // Counts the number of PREFETCHNTA instructions executed. CORE: PCore
   , { 0x40,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.PREFETCHW" } // Counts the number of PREFETCHW instructions executed. CORE: PCore
   , { 0x40,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.T0" } // Counts the number of PREFETCHT0 instructions executed. CORE: PCore
   , { 0x40,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.T1_T2" } // Counts the number of PREFETCHT1 or PREFETCHT2 instructions executed. CORE: PCore
   , { 0xA4,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN.BACKEND_BOUND_SLOTS" } // Number of slots in TMA method where no micro-operations were being issued from front-end to back-end of the machine due to lack of back-end resources. CORE: PCore
   , { 0xA4,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN.BAD_SPEC_SLOTS" } // Number of slots of TMA method that were wasted due to incorrect speculation. It covers all types of control-flow or data-related mis-speculations. CORE: PCore
   , { 0xA4,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN.BR_MISPREDICT_SLOTS" } // Number of TMA slots that were wasted due to incorrect speculation by (any type of) branch mispredictions. This event estimates number of speculative operations that were issued but not retired as well as the out-of-order engine recovery past a branch misprediction. CORE: PCore
   , { 0xA4,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN.MEMORY_BOUND_SLOTS" } // TOPDOWN.MEMORY_BOUND_SLOTS CORE: PCore
   , { 0x76,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DECODED.DEC0_UOPS" } // UOPS_DECODED.DEC0_UOPS CORE: PCore
   , { 0xB2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_0" } // Number of uops dispatch to execution port 0. CORE: PCore
   , { 0xB2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_1" } // Number of uops dispatch to execution port 1. CORE: PCore
   , { 0xB2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_2_3_10" } // Number of uops dispatch to execution ports 2, 3 and 10 CORE: PCore
   , { 0xB2,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_4_9" } // Number of uops dispatch to execution ports 4 and 9 CORE: PCore
   , { 0xB2,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_5_11" } // Number of uops dispatch to execution ports 5 and 11 CORE: PCore
   , { 0xB2,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_6" } // Number of uops dispatch to execution port 6. CORE: PCore
   , { 0xB2,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED.PORT_7_8" } // Number of uops dispatch to execution ports 7 and 8. CORE: PCore
   , { 0xB1,                0x02,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_1" } // Counts cycles when at least 1 micro-op is executed from any thread on physical core. CORE: PCore
   , { 0xB1,                0x02,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_2" } // Counts cycles when at least 2 micro-ops are executed from any thread on physical core. CORE: PCore
   , { 0xB1,                0x02,  0,          0,         0,      0x03,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_3" } // Counts cycles when at least 3 micro-ops are executed from any thread on physical core. CORE: PCore
   , { 0xB1,                0x02,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_4" } // Counts cycles when at least 4 micro-ops are executed from any thread on physical core. CORE: PCore
   , { 0xB1,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_1" } // Cycles where at least 1 uop was executed per-thread. CORE: PCore
   , { 0xB1,                0x01,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_2" } // Cycles where at least 2 uops were executed per-thread. CORE: PCore
   , { 0xB1,                0x01,  0,          0,         0,      0x03,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_3" } // Cycles where at least 3 uops were executed per-thread. CORE: PCore
   , { 0xB1,                0x01,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_4" } // Cycles where at least 4 uops were executed per-thread. CORE: PCore
   , { 0xB1,                0x01,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.STALLS" } // Counts cycles during which no uops were dispatched from the Reservation Station (RS) per thread. CORE: PCore
   , { 0xB1,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.THREAD" } // Counts the number of uops to be executed per-thread each cycle. CORE: PCore
   , { 0xB1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.X87" } // Counts the number of x87 uops executed. CORE: PCore
   , { 0xAE,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.ANY" } // Counts the number of uops that the Resource Allocation Table (RAT) issues to the Reservation Station (RS). CORE: PCore
   , { 0xAE,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.CYCLES" } // UOPS_ISSUED.CYCLES CORE: PCore
   , { 0xC2,                0x02,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.CYCLES" } // Counts cycles where at least one uop has retired. CORE: PCore
   , { 0xC2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.HEAVY" } // Counts the number of retired micro-operations (uops) except the last uop of each instruction. An instruction that is decoded into less than two uops does not contribute to the count. CORE: PCore
   , { 0xC2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000008,    0x000000000000, "UOPS_RETIRED.MS" } // UOPS_RETIRED.MS CORE: PCore
   , { 0xC2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.SLOTS" } // Counts the retirement slots used each cycle. CORE: PCore
   , { 0xC2,                0x02,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.STALLS" } // This event counts cycles without actually retired uops. CORE: PCore
   , { 0x2D,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "XQ.FULL_CYCLES" } // number of cycles when the thread is active and the uncore cannot take any further requests (for example prefetches, loads or stores initiated by the Core that miss the L2 cache). CORE: PCore
   , { 0xB0,                0x09,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.DIVIDER_ACTIVE" } // This event is deprecated. Refer to new event ARITH.DIV_ACTIVE CORE: PCore
   , { 0xB0,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.FP_DIVIDER_ACTIVE" } // This event is deprecated. Refer to new event ARITH.FPDIV_ACTIVE CORE: PCore
   , { 0xB0,                0x08,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.INT_DIVIDER_ACTIVE" } // This event is deprecated. Refer to new event ARITH.IDIV_ACTIVE CORE: PCore
   , { 0x48,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.L2_STALL" } // This event is deprecated. Refer to new event L1D_PEND_MISS.L2_STALLS CORE: PCore
   , { 0x20,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD" } // This event is deprecated. Refer to new event OFFCORE_REQUESTS_OUTSTANDING.DATA_RD CORE: PCore
   , { 0xA5,                0x07,  1,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "RS_EMPTY.COUNT" } // This event is deprecated. Refer to new event RS.EMPTY_COUNT CORE: PCore
   , { 0xA5,                0x07,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RS_EMPTY.CYCLES" } // This event is deprecated. Refer to new event RS.EMPTY CORE: PCore
   , { 0xB1,                0x01,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.STALL_CYCLES" } // This event is deprecated. Refer to new event UOPS_EXECUTED.STALLS CORE: PCore
   , { 0xC2,                0x02,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.STALL_CYCLES" } // This event is deprecated. Refer to new event UOPS_RETIRED.STALLS CORE: PCore
};

vector<PmcConfig> pmcConfigsRaptorLakeECore =
{
   //  eventSelect,         umask, edgeDetect, anyThread, invert, cmask, pebs3f6, pebs3f7,     offcore,        name,           comment
     { 0xC4,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.ALL_BRANCHES" } // Counts the total number of instructions in which the instruction pointer (IP) of the processor is resteered due to a branch instruction and the branch instruction successfully retires. All branch type instructions are accounted for. CORE: ECore
   , { 0xC5,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.ALL_BRANCHES" } // Counts the total number of mispredicted branch instructions retired. All branch type instructions are accounted for. Prediction of the branch target address enables the processor to begin executing instructions before the non-speculative execution path is known. The branch prediction unit (BPU) predicts the target address based on the instruction pointer (IP) of the branch and on the execution path through which execution reached this IP. A branch misprediction occurs when the prediction is wrong, and results in discarding all instructions executed in the speculative path and re-fetching from the correct path. CORE: ECore
   , { 0x3C,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.CORE_P" } // Counts the number of core cycles while the core is not in a halt state. The core enters the halt state when it is running the HLT instruction. The core frequency may change from time to time. For this reason this event may have a changing ratio with regards to time. This event uses a programmable general purpose performance counter. CORE: ECore
   , { 0x3C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.REF_TSC_P" } // Counts the number of reference cycles that the core is not in a halt state. The core enters the halt state when it is running the HLT instruction. This event is not affected by core frequency changes and increments at a fixed frequency that is also used for the Time Stamp Counter (TSC). This event uses a programmable general purpose performance counter. CORE: ECore
   , { 0x3C,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.THREAD_P" } // Counts the number of core cycles while the core is not in a halt state. The core enters the halt state when it is running the HLT instruction. The core frequency may change from time to time. For this reason this event may have a changing ratio with regards to time. This event uses a programmable general purpose performance counter. CORE: ECore
   , { 0xC0,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.ANY_P" } // Counts the total number of instructions that retired. For instructions that consist of multiple uops, this event counts the retirement of the last uop of the instruction. This event continues counting during hardware interrupts, traps, and inside interrupt handlers. This event uses a programmable general purpose performance counter. CORE: ECore
   , { 0x2E,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LONGEST_LAT_CACHE.MISS" } // Counts the number of cacheable memory requests that miss in the Last Level Cache (LLC). Requests include demand loads, reads for ownership (RFO), instruction fetches and L1 HW prefetches. If the core has access to an L3 cache, the LLC is the L3 cache, otherwise it is the L2 cache. Counts on a per core basis. CORE: ECore
   , { 0x2E,                0x4F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LONGEST_LAT_CACHE.REFERENCE" } // Counts the number of cacheable memory requests that access the Last Level Cache (LLC). Requests include demand loads, reads for ownership (RFO), instruction fetches and L1 HW prefetches. If the core has access to an L3 cache, the LLC is the L3 cache, otherwise it is the L2 cache. Counts on a per core basis. CORE: ECore
   , { 0xE6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BACLEARS.ANY" } // Counts the total number of BACLEARS, which occur when the Branch Target Buffer (BTB) prediction or lack thereof, was corrected by a later branch predictor in the frontend. Includes BACLEARS due to all branch types including conditional and unconditional jumps, returns, and indirect branches. CORE: ECore
   , { 0xC4,                0x7E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.COND" } // Counts the number of retired JCC (Jump on Conditional Code) branch instructions retired, includes both taken and not taken branches. CORE: ECore
   , { 0xC4,                0xFE,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.COND_TAKEN" } // Counts the number of taken JCC (Jump on Conditional Code) branch instructions retired. CORE: ECore
   , { 0xC4,                0xBF,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.FAR_BRANCH" } // Counts the number of far branch instructions retired, includes far jump, far call and return, and interrupt call and return. CORE: ECore
   , { 0xC4,                0xEB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.INDIRECT" } // Counts the number of near indirect JMP and near indirect CALL branch instructions retired. CORE: ECore
   , { 0xC4,                0xFB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.INDIRECT_CALL" } // Counts the number of near indirect CALL branch instructions retired. CORE: ECore
   , { 0xC4,                0xF9,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_CALL" } // Counts the number of near CALL branch instructions retired. CORE: ECore
   , { 0xC4,                0xF7,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_RETURN" } // Counts the number of near RET branch instructions retired. CORE: ECore
   , { 0xC4,                0xC0,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_TAKEN" } // Counts the number of near taken branch instructions retired. CORE: ECore
   , { 0xC4,                0xFD,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.REL_CALL" } // Counts the number of near relative CALL branch instructions retired. CORE: ECore
   , { 0xC5,                0x7E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.COND" } // Counts the number of mispredicted JCC (Jump on Conditional Code) branch instructions retired. CORE: ECore
   , { 0xC5,                0xFE,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.COND_TAKEN" } // Counts the number of mispredicted taken JCC (Jump on Conditional Code) branch instructions retired. CORE: ECore
   , { 0xC5,                0xEB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.INDIRECT" } // Counts the number of mispredicted near indirect JMP and near indirect CALL branch instructions retired. CORE: ECore
   , { 0xC5,                0xFB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.INDIRECT_CALL" } // Counts the number of mispredicted near indirect CALL branch instructions retired. CORE: ECore
   , { 0xC5,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NEAR_TAKEN" } // Counts the number of mispredicted near taken branch instructions retired. CORE: ECore
   , { 0xC5,                0xF7,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.RETURN" } // Counts the number of mispredicted near RET branch instructions retired. CORE: ECore
   , { 0x08,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED" } // Counts the number of page walks completed due to loads (including SW prefetches) whose address translations missed in all Translation Lookaside Buffer (TLB) levels and were mapped to any page size. Includes page walks that page fault. CORE: ECore
   , { 0x49,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED" } // Counts the number of page walks completed due to stores whose address translations missed in all Translation Lookaside Buffer (TLB) levels and were mapped to any page size. Includes page walks that page fault. CORE: ECore
   , { 0x80,                0x03,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE.ACCESSES" } // Counts the total number of requests to the instruction cache. The event only counts new cache line accesses, so that multiple back to back fetches to the exact same cache line or byte chunk count as one. Specifically, the event counts when accesses from sequential code crosses the cache line boundary, or when a branch target is moved to a new line or to a non-sequential byte chunk of the same line. CORE: ECore
   , { 0x80,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE.MISSES" } // Counts the number of missed requests to the instruction cache. The event only counts new cache line accesses, so that multiple back to back fetches to the exact same cache line and byte chunk count as one. Specifically, the event counts when accesses from sequential code crosses the cache line boundary, or when a branch target is moved to a new line or to a non-sequential byte chunk of the same line. CORE: ECore
   , { 0x85,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.MISS_CAUSED_WALK" } // Counts the number of page walks initiated by a instruction fetch that missed the first and second level TLBs. CORE: ECore
   , { 0x85,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.PDE_CACHE_MISS" } // Counts the number of page walks due to an instruction fetch that miss the PDE (Page Directory Entry) cache. CORE: ECore
   , { 0x85,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED" } // Counts the number of page walks completed due to instruction fetches whose address translations missed in all Translation Lookaside Buffer (TLB) levels and were mapped to any page size. Includes page walks that page fault. CORE: ECore
   , { 0x03,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.ADDRESS_ALIAS" } // Counts the number of retired loads that are blocked because it initially appears to be store forward blocked, but subsequently is shown not to be blocked based on 4K alias check. CORE: ECore
   , { 0x03,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.DATA_UNKNOWN" } // Counts the number of retired loads that are blocked because its address exactly matches an older store whose data is not ready. CORE: ECore
   , { 0x05,                0xFF,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.ANY_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer is stalled due to any number of reasons, including an L1 miss, WCB full, pagewalk, store address block or store data block, on a load that retires. CORE: ECore
   , { 0x05,                0x90,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.DTLB_MISS_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a DTLB miss. CORE: ECore
   , { 0x05,                0xF4,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.L1_BOUND_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer is stalled due to a core bound stall including a store address match, a DTLB miss or a page walk that detains the load from retiring. CORE: ECore
   , { 0x05,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.L1_MISS_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a DL1 miss. CORE: ECore
   , { 0x05,                0xC0,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.OTHER_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to other block cases such as pipeline conflicts, fences, etc. CORE: ECore
   , { 0x05,                0xA0,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.PGWALK_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a pagewalk. CORE: ECore
   , { 0x05,                0x84,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_HEAD.ST_ADDR_AT_RET" } // Counts the number of cycles that the head (oldest load) of the load buffer and retirement are both stalled due to a store address match. CORE: ECore
   , { 0xC3,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.DISAMBIGUATION" } // Counts the number of machine clears due to memory ordering in which an internal load passes an older store within the same CPU. CORE: ECore
   , { 0xC3,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.FP_ASSIST" } // Counts the number of floating point operations retired that required microcode assist, which is not a reflection of the number of FP operations, instructions or uops. CORE: ECore
   , { 0xC3,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.MEMORY_ORDERING" } // Counts the number of machine clears due to memory ordering caused by a snoop from an external agent. Does not count internally generated machine clears such as those due to memory disambiguation. CORE: ECore
   , { 0xC3,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.MRN_NUKE" } // Counts the number of machines clears due to memory renaming. CORE: ECore
   , { 0xC3,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.PAGE_FAULT" } // Counts the number of machine clears due to a page fault. Counts both I-Side and D-Side (Loads/Stores) page faults. A page fault occurs when either the page is not present, or an access violation occurs. CORE: ECore
   , { 0xC3,                0x6F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.SLOW" } // Counts the number of machine clears that flush the pipeline and restart the machine with the use of microcode due to SMC, MEMORY_ORDERING, FP_ASSISTS, PAGE_FAULT, DISAMBIGUATION, and FPC_VIRTUAL_TRAP. CORE: ECore
   , { 0xC3,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.SMC" } // Counts the number of machine clears due to program modifying data (self modifying code) within 1K of a recently fetched code page. CORE: ECore
   , { 0x34,                0x38,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.IFETCH" } // Counts the number of cycles the core is stalled due to an instruction cache or translation lookaside buffer (TLB) miss which hit in the L2, LLC, DRAM or MMIO (Non-DRAM). CORE: ECore
   , { 0x34,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.IFETCH_DRAM_HIT" } // Counts the number of cycles the core is stalled due to an instruction cache or translation lookaside buffer (TLB) miss which hit in DRAM or MMIO (non-DRAM). CORE: ECore
   , { 0x34,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.IFETCH_L2_HIT" } // Counts the number of cycles the core is stalled due to an instruction cache or Translation Lookaside Buffer (TLB) miss which hit in the L2 cache. CORE: ECore
   , { 0x34,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.IFETCH_LLC_HIT" } // Counts the number of cycles the core is stalled due to an instruction cache or Translation Lookaside Buffer (TLB) miss which hit in the Last Level Cache (LLC) or other core with HITE/F/M. CORE: ECore
   , { 0x34,                0x07,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.LOAD" } // Counts the number of cycles the core is stalled due to a demand load miss which hit in the L2, LLC, DRAM or MMIO (Non-DRAM). CORE: ECore
   , { 0x34,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.LOAD_DRAM_HIT" } // Counts the number of cycles the core is stalled due to a demand load miss which hit in DRAM or MMIO (Non-DRAM). CORE: ECore
   , { 0x34,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.LOAD_L2_HIT" } // Counts the number of cycles the core is stalled due to a demand load which hit in the L2 cache. CORE: ECore
   , { 0x34,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_BOUND_STALLS.LOAD_LLC_HIT" } // Counts the number of cycles the core is stalled due to a demand load which hit in the Last Level Cache (LLC) or other core with HITE/F/M. CORE: ECore
   , { 0xD1,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_UOPS_RETIRED.DRAM_HIT" } // Counts the number of load uops retired that hit in DRAM. CORE: ECore
   , { 0xD1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_UOPS_RETIRED.L2_HIT" } // Counts the number of load uops retired that hit in the L2 cache. CORE: ECore
   , { 0xD1,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_UOPS_RETIRED.L3_HIT" } // Counts the number of load uops retired that hit in the L3 cache. CORE: ECore
   , { 0x04,                0x07,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_SCHEDULER_BLOCK.ALL" } // Counts the number of cycles that uops are blocked for any of the following reasons: load buffer, store buffer or RSV full. CORE: ECore
   , { 0x04,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_SCHEDULER_BLOCK.LD_BUF" } // Counts the number of cycles that uops are blocked due to a load buffer full condition. CORE: ECore
   , { 0x04,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_SCHEDULER_BLOCK.RSV" } // Counts the number of cycles that uops are blocked due to an RSV full condition. CORE: ECore
   , { 0x04,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_SCHEDULER_BLOCK.ST_BUF" } // Counts the number of cycles that uops are blocked due to a store buffer full condition. CORE: ECore
   , { 0xD0,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.ALL_LOADS" } // Counts the total number of load uops retired. CORE: ECore
   , { 0xD0,                0x82,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.ALL_STORES" } // Counts the total number of store uops retired. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x080,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_128" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 128 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x010,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_16" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 16 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x100,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_256" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 256 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x020,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_32" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 32 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x004,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_4" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 4 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x200,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_512" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 512 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x040,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_64" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 64 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x05,  0,          0,         0,      0x00,  0x008,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOAD_LATENCY_GT_8" } // Counts the number of tagged loads with an instruction latency that exceeds or equals the threshold of 8 cycles as defined in MEC_CR_PEBS_LD_LAT_THRESHOLD (3F6H). Only counts with PEBS enabled. If a PEBS record is generated, will populate the PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xD0,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.LOCK_LOADS" } // Counts the number of load uops retired that performed one or more locks. CORE: ECore
   , { 0xD0,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.SPLIT_LOADS" } // Counts the number of retired split load uops. CORE: ECore
   , { 0xD0,                0x06,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_UOPS_RETIRED.STORE_LATENCY" } // Counts the number of stores uops retired. Counts with or without PEBS enabled. If PEBS is enabled and a PEBS record is generated, will populate PEBS Latency and PEBS Data Source fields accordingly. CORE: ECore
   , { 0xE4,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MISC_RETIRED.LBR_INSERTS" } // Counts the number of LBR entries recorded. Requires LBRs to be enabled in IA32_LBR_CTL. This event is PDIR on GP0 and NPEBS on all other GPs CORE: ECore
   , { 0x75,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SERIALIZATION.C01_MS_SCB" } // Counts the number of issue slots in a UMWAIT or TPAUSE instruction where no uop issues due to the instruction putting the CPU into the C0.1 activity state. For Tremont, UMWAIT and TPAUSE will only put the CPU into C0.1 activity state (not C0.2 activity state) CORE: ECore
   , { 0x75,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SERIALIZATION.NON_C01_MS_SCB" } // Counts the number of issue slots not consumed by the backend due to a micro-sequencer (MS) scoreboard, which stalls the front-end from issuing from the UROM until a specified older uop retires. The most commonly executed instruction with an MS scoreboard is PAUSE. CORE: ECore
   , { 0x73,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BAD_SPECULATION.ALL" } // Counts the total number of issue slots that were not consumed by the backend because allocation is stalled due to a mispredicted jump or a machine clear. Only issue slots wasted due to fast nukes such as memory ordering nukes are counted. Other nukes are not accounted for. Counts all issue slots blocked during this recovery window including relevant microcode flows and while uops are not yet available in the instruction queue (IQ) even if an FE_bound event occurs during this period. Also includes the issue slots that were consumed by the backend but were thrown away because they were younger than the mispredict or machine clear. CORE: ECore
   , { 0x73,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BAD_SPECULATION.FASTNUKE" } // Counts the number of issue slots every cycle that were not consumed by the backend due to fast nukes such as memory ordering and memory disambiguation machine clears. CORE: ECore
   , { 0x73,                0x03,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BAD_SPECULATION.MACHINE_CLEARS" } // Counts the total number of issue slots that were not consumed by the backend because allocation is stalled due to a machine clear (nuke) of any kind including memory ordering and memory disambiguation. CORE: ECore
   , { 0x73,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BAD_SPECULATION.MISPREDICT" } // Counts the number of issue slots every cycle that were not consumed by the backend due to branch mispredicts. CORE: ECore
   , { 0x73,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BAD_SPECULATION.NUKE" } // Counts the number of issue slots every cycle that were not consumed by the backend due to a machine clear (nuke). CORE: ECore
   , { 0x74,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.ALL" } // Counts the total number of issue slots every cycle that were not consumed by the backend due to backend stalls. CORE: ECore
   , { 0x74,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.ALLOC_RESTRICTIONS" } // Counts the number of issue slots every cycle that were not consumed by the backend due to certain allocation restrictions. CORE: ECore
   , { 0x74,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.MEM_SCHEDULER" } // Counts the number of issue slots every cycle that were not consumed by the backend due to memory reservation stalls in which a scheduler is not able to accept uops. CORE: ECore
   , { 0x74,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.NON_MEM_SCHEDULER" } // Counts the number of issue slots every cycle that were not consumed by the backend due to IEC or FPC RAT stalls, which can be due to FIQ or IEC reservation stalls in which the integer, floating point or SIMD scheduler is not able to accept uops. CORE: ECore
   , { 0x74,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.REGISTER" } // Counts the number of issue slots every cycle that were not consumed by the backend due to the physical register file unable to accept an entry (marble stalls). CORE: ECore
   , { 0x74,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.REORDER_BUFFER" } // Counts the number of issue slots every cycle that were not consumed by the backend due to the reorder buffer being full (ROB stalls). CORE: ECore
   , { 0x74,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_BE_BOUND.SERIALIZATION" } // Counts the number of issue slots every cycle that were not consumed by the backend due to scoreboards from the instruction queue (IQ), jump execution unit (JEU), or microcode sequencer (MS). CORE: ECore
   , { 0x71,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.ALL" } // Counts the total number of issue slots every cycle that were not consumed by the backend due to frontend stalls. CORE: ECore
   , { 0x71,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.BRANCH_DETECT" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to BACLEARS, which occurs when the Branch Target Buffer (BTB) prediction or lack thereof, was corrected by a later branch predictor in the frontend. Includes BACLEARS due to all branch types including conditional and unconditional jumps, returns, and indirect branches. CORE: ECore
   , { 0x71,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.BRANCH_RESTEER" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to BTCLEARS, which occurs when the Branch Target Buffer (BTB) predicts a taken branch. CORE: ECore
   , { 0x71,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.CISC" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to the microcode sequencer (MS). CORE: ECore
   , { 0x71,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.DECODE" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to decode stalls. CORE: ECore
   , { 0x71,                0x8D,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.FRONTEND_BANDWIDTH" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to frontend bandwidth restrictions due to decode, predecode, cisc, and other limitations. CORE: ECore
   , { 0x71,                0x72,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.FRONTEND_LATENCY" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to a latency related stalls including BACLEARs, BTCLEARs, ITLB misses, and ICache misses. CORE: ECore
   , { 0x71,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.ICACHE" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to instruction cache misses. CORE: ECore
   , { 0x71,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.ITLB" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to Instruction Table Lookaside Buffer (ITLB) misses. CORE: ECore
   , { 0x71,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.OTHER" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to other common frontend stalls not categorized. CORE: ECore
   , { 0x71,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_FE_BOUND.PREDECODE" } // Counts the number of issue slots every cycle that were not delivered by the frontend due to wrong predecodes. CORE: ECore
   , { 0xC2,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TOPDOWN_RETIRING.ALL" } // Counts the total number of consumed retirement slots. CORE: ECore
   , { 0x0E,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.ANY" } // Counts the number of uops issued by the front end every cycle. When 4-uops are requested and only 2-uops are delivered, the event counts 2. Uops_issued correlates to the number of ROB entries. If uop takes 2 ROB slots it counts as 2 uops_issued. CORE: ECore
   , { 0xC2,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.ALL" } // Counts the total number of uops retired. CORE: ECore
   , { 0xC2,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.FPDIV" } // Counts the number of floating point divide uops retired (x87 and SSE, including x87 sqrt). CORE: ECore
   , { 0xC2,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.IDIV" } // Counts the number of integer divide uops retired. CORE: ECore
   , { 0xC2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.MS" } // Counts the number of uops that are from complex flows issued by the Microcode Sequencer (MS). This includes uops from flows due to complex instructions, faults, assists, and inserted flows. CORE: ECore
   , { 0xC2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.X87" } // Counts the number of x87 uops retired, includes those in MS flows. CORE: ECore
   , { 0xC4,                0xF9,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.CALL" } // This event is deprecated. Refer to new event BR_INST_RETIRED.NEAR_CALL CORE: ECore
   , { 0xC4,                0xFB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.IND_CALL" } // This event is deprecated. Refer to new event BR_INST_RETIRED.INDIRECT_CALL CORE: ECore
   , { 0xC4,                0x7E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.JCC" } // This event is deprecated. Refer to new event BR_INST_RETIRED.COND CORE: ECore
   , { 0xC4,                0xEB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NON_RETURN_IND" } // This event is deprecated. Refer to new event BR_INST_RETIRED.INDIRECT CORE: ECore
   , { 0xC4,                0xF7,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.RETURN" } // This event is deprecated. Refer to new event BR_INST_RETIRED.NEAR_RETURN CORE: ECore
   , { 0xC4,                0xFE,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.TAKEN_JCC" } // This event is deprecated. Refer to new event BR_INST_RETIRED.COND_TAKEN CORE: ECore
   , { 0xC5,                0xFB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.IND_CALL" } // This event is deprecated. Refer to new event BR_MISP_RETIRED.INDIRECT_CALL CORE: ECore
   , { 0xC5,                0x7E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.JCC" } // This event is deprecated. Refer to new event BR_MISP_RETIRED.COND CORE: ECore
   , { 0xC5,                0xEB,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NON_RETURN_IND" } // This event is deprecated. Refer to new event BR_MISP_RETIRED.INDIRECT CORE: ECore
   , { 0xC5,                0xFE,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.TAKEN_JCC" } // This event is deprecated. Refer to new event BR_MISP_RETIRED.COND_TAKEN CORE: ECore
   , { 0x03,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.4K_ALIAS" } // This event is deprecated. Refer to new event LD_BLOCKS.ADDRESS_ALIAS CORE: ECore
};

vector<PmcConfig> pmcConfigsRaptorLakeUNCore =
{
   //  eventSelect,         umask, edgeDetect, anyThread, invert, cmask, pebs3f6, pebs3f7,     offcore,        name,           comment
     { 0x84,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_COH_TRK_REQUESTS.ALL" } // Number of requests allocated in Coherency Tracker.
   , { 0x80,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_OCCUPANCY.ALL" } // Each cycle counts number of all outgoing valid entries in ReqTrk. Such entry is defined as valid from its allocation in ReqTrk till deallocation. Accounts for Coherent and non-coherent traffic.
   , { 0x81,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_REQUESTS.ALL" } // Counts the number of coherent and in-coherent requests initiated by IA cores, processor graphic units, or LLC.
   , { 0x24,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_ACT_COUNT_RD" } // ACT command for a read request sent to DRAM
   , { 0x26,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_ACT_COUNT_TOTAL" } // ACT command sent to DRAM
   , { 0x25,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_ACT_COUNT_WR" } // ACT command for a write request sent to DRAM
   , { 0x22,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_CAS_COUNT_RD" } // Read CAS command sent to DRAM
   , { 0x23,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_CAS_COUNT_WR" } // Write CAS command sent to DRAM
   , { 0x01,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_CLOCKTICKS" } // Number of clocks
   , { 0x1D,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_PAGE_EMPTY_RD" } // incoming read request page status is "Page Empty"
   , { 0x20,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_PAGE_EMPTY_WR" } // incoming write request page status is "Page Empty"
   , { 0x1C,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_PAGE_HIT_RD" } // incoming read request page status is "Page Hit"
   , { 0x1F,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_PAGE_HIT_WR" } // incoming write request page status is "Page Hit"
   , { 0x1E,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_PAGE_MISS_RD" } // incoming read request page status is "Page Miss"
   , { 0x21,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_PAGE_MISS_WR" } // incoming write request page status is "Page Miss"
   , { 0x19,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_THERMAL_HOT" } // Any Rank at Hot state
   , { 0x1A,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_DRAM_THERMAL_WARM" } // Any Rank at Warm state
   , { 0x28,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_PRE_COUNT_IDLE" } // PRE command sent to DRAM due to page table idle timer expiration
   , { 0x27,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_PRE_COUNT_PAGE_MISS" } // PRE command sent to DRAM for a read/write request
   , { 0x0A,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_PREFETCH_RD" } // Incoming read prefetch request from IA.
   , { 0x02,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_VC0_REQUESTS_RD" } // Incoming VC0 read request
   , { 0x03,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_VC0_REQUESTS_WR" } // Incoming VC0 write request
   , { 0x04,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_VC1_REQUESTS_RD" } // Incoming VC1 read request
   , { 0x05,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_M_VC1_REQUESTS_WR" } // Incoming VC1 write request
   , { 0x00,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_MC0_RDCAS_COUNT_FREERUN" } // Counts every 64B read request entering the Memory Controller 0 to DRAM (sum of all channels).
   , { 0x00,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_MC0_WRCAS_COUNT_FREERUN" } // Counts every 64B write request entering the Memory Controller 0 to DRAM (sum of all channels).
   , { 0x00,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_MC1_RDCAS_COUNT_FREERUN" } // Counts every 64B read entering the Memory Controller 1 to DRAM (sum of all channels).
   , { 0x00,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_MC1_WRCAS_COUNT_FREERUN" } // Counts every 64B write request entering the Memory Controller 1 to DRAM (sum of all channels).
};

/*
vector<PmcConfig> pmcConfigsRaptorLakePCoreOffcore =
{
   //  eventSelect,         umask, edgeDetect, anyThread, invert, cmask, pebs3f6, pebs3f7,     offcore,        name,           comment
     { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FBFC00001, "OCR.DEMAND_DATA_RD.L3_MISS" } // Counts demand data reads that were not supplied by the L3 cache.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FBFC00002, "OCR.DEMAND_RFO.L3_MISS" } // Counts demand read for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that were not supplied by the L3 cache.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010001, "OCR.DEMAND_DATA_RD.ANY_RESPONSE" } // Counts demand data reads that have any type of response.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010800, "OCR.STREAMING_WR.ANY_RESPONSE" } // Counts streaming stores that have any type of response.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010002, "OCR.DEMAND_RFO.ANY_RESPONSE" } // Counts demand read for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that have any type of response.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010003C0001, "OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HITM" } // Counts demand data reads that resulted in a snoop hit in another cores caches, data forwarding is required as the data is modified.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0008003C0001, "OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD" } // Counts demand data reads that resulted in a snoop hit in another cores caches which forwarded the unmodified data to the requesting core.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010003C0002, "OCR.DEMAND_RFO.L3_HIT.SNOOP_HITM" } // Counts demand read for ownership (RFO) requests and software prefetches for exclusive ownership (PREFETCHW) that resulted in a snoop hit in another cores caches, data forwarding is required as the data is modified.
   , { 0x{2AH,2BH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000184000001, "OCR.DEMAND_DATA_RD.DRAM" } // Counts demand data reads that were supplied by DRAM.
};

vector<PmcConfig> pmcConfigsRaptorLakeECoreOffcore =
{
   //  eventSelect,         umask, edgeDetect, anyThread, invert, cmask, pebs3f6, pebs3f7,     offcore,        name,           comment
     { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010001, "OCR.DEMAND_DATA_RD.ANY_RESPONSE" } // Counts demand data reads that have any type of response.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x003F84400001, "OCR.DEMAND_DATA_RD.L3_MISS" } // Counts demand data reads that were not supplied by the L3 cache.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010002, "OCR.DEMAND_RFO.ANY_RESPONSE" } // Counts demand reads for ownership (RFO) and software prefetches for exclusive ownership (PREFETCHW) that have any type of response.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x003F84400002, "OCR.DEMAND_RFO.L3_MISS" } // Counts demand reads for ownership (RFO) and software prefetches for exclusive ownership (PREFETCHW) that were not supplied by the L3 cache.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010008, "OCR.COREWB_M.ANY_RESPONSE" } // Counts modified writebacks from L1 cache and L2 cache that have any type of response.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010800, "OCR.STREAMING_WR.ANY_RESPONSE" } // Counts streaming stores that have any type of response.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x400000010000, "OCR.PARTIAL_STREAMING_WR.ANY_RESPONSE" } // Counts streaming stores which modify only part of a 64 byte cacheline that have any type of response.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x800000010000, "OCR.FULL_STREAMING_WR.ANY_RESPONSE" } // Counts streaming stores which modify a full 64 byte cacheline that have any type of response.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x0004003C0001, "OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_NO_FWD" } // Counts demand data reads that were supplied by the L3 cache where a snoop was sent, the snoop hit, but no data was forwarded.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x0008003C0001, "OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HIT_WITH_FWD" } // Counts demand data reads that were supplied by the L3 cache where a snoop was sent, the snoop hit, and non-modified data was forwarded.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010003C0001, "OCR.DEMAND_DATA_RD.L3_HIT.SNOOP_HITM" } // Counts demand data reads that were supplied by the L3 cache where a snoop was sent, the snoop hit, and modified data was forwarded.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010003C0002, "OCR.DEMAND_RFO.L3_HIT.SNOOP_HITM" } // Counts demand reads for ownership (RFO) and software prefetches for exclusive ownership (PREFETCHW) that were supplied by the L3 cache where a snoop was sent, the snoop hit, and modified data was forwarded.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x003F803C0001, "OCR.DEMAND_DATA_RD.L3_HIT" } // Counts demand data reads that were supplied by the L3 cache.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x003F803C0002, "OCR.DEMAND_RFO.L3_HIT" } // Counts demand reads for ownership (RFO) and software prefetches for exclusive ownership (PREFETCHW) that were supplied by the L3 cache.
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x003F84400001, "OCR.DEMAND_DATA_RD.L3_MISS_LOCAL" } // Counts demand data reads that were not supplied by the L3 cache. [L3_MISS_LOCAL is alias to L3_MISS]
   , { 0x(B7H),      0x{01H,02H},  0,          0,         0,      0x00,  0x000,   0x000000,    0x003F84400002, "OCR.DEMAND_RFO.L3_MISS_LOCAL" } // Counts demand reads for ownership (RFO) and software prefetches for exclusive ownership (PREFETCHW) that were not supplied by the L3 cache. [L3_MISS_LOCAL is alias to L3_MISS]
};
   */

vector<PmcConfig> pmcConfigsCoffeeLake =
{
   //  eventSelect,         umask, edgeDetect, anyThread, invert, cmask, pebs3f6, pebs3f7,     offcore,        name
     { 0xC4,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.ALL_BRANCHES" } // Counts all (macro) branch instructions retired.
   , { 0xC5,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.ALL_BRANCHES" } // Counts all the retired branch instructions that were mispredicted by the processor. A branch misprediction occurs when the processor incorrectly predicts the destination of the branch. When the misprediction is discovered at execution, all the instructions executed in the wrong (speculative) path must be discarded, and the processor must start fetching from the correct path.
   , { 0x3C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_THREAD_UNHALTED.REF_XCLK" } // Core crystal clock cycles when the thread is unhalted.
   , { 0x3C,                0x01,  0,          1,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_THREAD_UNHALTED.REF_XCLK_ANY" } // Core crystal clock cycles when at least one thread on the physical core is unhalted.
   , { 0x3C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.REF_XCLK" } // Core crystal clock cycles when the thread is unhalted.
   , { 0x3C,                0x01,  0,          1,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.REF_XCLK_ANY" } // Core crystal clock cycles when at least one thread on the physical core is unhalted.
   , { 0x3C,                0x00,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.RING0_TRANS" } // Counts when the Current Privilege Level (CPL) transitions from ring 1, 2 or 3 to ring 0 (Kernel).
   , { 0x3C,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.THREAD_P" } // This is an architectural event that counts the number of thread cycles while the thread is not in a halt state. The thread enters the halt state when it is running the HLT instruction. The core frequency may change from time to time due to power or thermal throttling. For this reason, this event may have a changing ratio with regards to wall clock time.
   , { 0x3C,                0x00,  0,          1,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.THREAD_P_ANY" } // Core cycles when at least one thread on the physical core is not in halt state.
   , { 0xC0,                0x00,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.ANY_P" } // Counts the number of instructions (EOMs) retired. Counting covers macro-fused instructions individually (that is, increments by two).
   , { 0x2E,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LONGEST_LAT_CACHE.MISS" } // Counts core-originated cacheable requests that miss the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches from L1 and L2. It does not include all misses to the L3.
   , { 0x2E,                0x4F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LONGEST_LAT_CACHE.REFERENCE" } // Counts core-originated cacheable requests to the L3 cache (Longest Latency cache). Requests include data and code reads, Reads-for-Ownership (RFOs), speculative accesses and hardware prefetches from L1 and L2. It does not include all accesses to the L3.
   , { 0x14,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ARITH.DIVIDER_ACTIVE" } // Cycles when divide unit is busy executing divide or square root operations. Accounts for integer and floating-point operations.
   , { 0xE6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BACLEARS.ANY" } // Counts the number of times the front-end is resteered when it finds a branch instruction in a fetch line. This occurs for the first time a branch instruction is fetched or when the branch is not tracked by the BPU (Branch Prediction Unit) anymore.
   , { 0xC4,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.ALL_BRANCHES_PS" } // This is a precise version of BR_INST_RETIRED.ALL_BRANCHES that counts all (macro) branch instructions retired.
   , { 0xC4,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.COND_NTAKEN" } // This event counts not taken branch instructions retired.
   , { 0xC4,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.CONDITIONAL" } // This event counts conditional branch instructions retired.
   , { 0xC4,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.CONDITIONAL_PS" } // This is a precise version (that is, uses PEBS) of the event that counts conditional branch instructions retired.
   , { 0xC4,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.FAR_BRANCH" } // This event counts far branch instructions retired.
   , { 0xC4,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.FAR_BRANCH_PS" } // This is a precise version (that is, uses PEBS) of the event that counts far branch instructions retired.
   , { 0xC4,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_CALL" } // This event counts both direct and indirect near call instructions retired.
   , { 0xC4,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_CALL_PS" } // This is a precise version (that is, uses PEBS) of the event that counts both direct and indirect near call instructions retired.
   , { 0xC4,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_RETURN" } // This event counts return instructions retired.
   , { 0xC4,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_RETURN_PS" } // This is a precise version (that is, uses PEBS) of the event that counts return instructions retired.
   , { 0xC4,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_TAKEN" } // This event counts taken branch instructions retired.
   , { 0xC4,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NEAR_TAKEN_PS" } // This is a precise version (that is, uses PEBS) of the event that counts taken branch instructions retired.
   , { 0xC4,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_INST_RETIRED.NOT_TAKEN" } // This event counts not taken branch instructions retired.
   , { 0x89,                0xFF,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_EXEC.ALL_BRANCHES" } // This event counts both taken and not taken speculative and retired mispredicted branch instructions.
   , { 0x89,                0xE4,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_EXEC.INDIRECT" } // Counts speculatively miss-predicted indirect branches at execution time. Counts for indirect near CALL or JMP instructions (RET excluded).
   , { 0xC5,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.ALL_BRANCHES_PS" } // This is a precise version of BR_MISP_RETIRED.ALL_BRANCHES that counts all mispredicted macro branch instructions retired.
   , { 0xC5,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.CONDITIONAL" } // This event counts mispredicted conditional branch instructions retired.
   , { 0xC5,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.CONDITIONAL_PS" } // This is a precise version (that is, uses PEBS) of the event that counts mispredicted conditional branch instructions retired.
   , { 0xC5,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NEAR_CALL" } // Counts both taken and not taken retired mispredicted direct and indirect near calls, including both register and memory indirect.
   , { 0xC5,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NEAR_CALL_PS" } // This event counts both taken and not taken retired mispredicted direct and indirect near calls, including both register and memory indirect.
   , { 0xC5,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NEAR_TAKEN" } // Number of near branch instructions retired that were mispredicted and taken.
   , { 0xC5,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "BR_MISP_RETIRED.NEAR_TAKEN_PS" } // Number of near branch instructions retired that were mispredicted and taken.
   , { 0x3C,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_THREAD_UNHALTED.ONE_THREAD_ACTIVE" } // Core crystal clock cycles when this thread is unhalted and the other thread is halted.
   , { 0x3C,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "CPU_CLK_UNHALTED.ONE_THREAD_ACTIVE" } // Core crystal clock cycles when this thread is unhalted and the other thread is halted.
   , { 0xA3,                0x08,  0,          0,         0,      0x08,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_L1D_MISS" } // Cycles while L1 cache miss demand load is outstanding.
   , { 0xA3,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_L2_MISS" } // Cycles while L2 cache miss demand load is outstanding.
   , { 0xA3,                0x02,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_L3_MISS" } // Cycles while L3 cache miss demand load is outstanding.
   , { 0xA3,                0x10,  0,          0,         0,      0x10,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.CYCLES_MEM_ANY" } // Cycles while memory subsystem has an outstanding load.
   , { 0xA3,                0x0C,  0,          0,         0,      0x0C,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_L1D_MISS" } // Execution stalls while L1 cache miss demand load is outstanding.
   , { 0xA3,                0x05,  0,          0,         0,      0x05,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_L2_MISS" } // Execution stalls while L2 cache miss demand load is outstanding.
   , { 0xA3,                0x06,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_L3_MISS" } // Execution stalls while L3 cache miss demand load is outstanding.
   , { 0xA3,                0x14,  0,          0,         0,      0x14,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_MEM_ANY" } // Execution stalls while memory subsystem has an outstanding load.
   , { 0xA3,                0x04,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "CYCLE_ACTIVITY.STALLS_TOTAL" } // Total execution stalls.
   , { 0xAB,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DSB2MITE_SWITCHES.COUNT" } // This event counts the number of the Decode Stream Buffer (DSB)-to-MITE switches including all misses because of missing Decode Stream Buffer (DSB) cache and u-arch forced misses. Note: Invoking MITE requires two or three cycles delay.
   , { 0xAB,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DSB2MITE_SWITCHES.PENALTY_CYCLES" } // Counts Decode Stream Buffer (DSB)-to-MITE switch true penalty cycles. These cycles do not include uops routed through because of the switch itself, for example, when Instruction Decode Queue (IDQ) pre-allocation is unavailable, or Instruction Decode Queue (IDQ) is full. SBD-to-MITE switch true penalty cycles happen after the merge mux (MM) receives Decode Stream Buffer (DSB) Sync-indication until receiving the first MITE uop. MM is placed before Instruction Decode Queue (IDQ) to merge uops being fed from the MITE and Decode Stream Buffer (DSB) paths. Decode Stream Buffer (DSB) inserts the Sync-indication whenever a Decode Stream Buffer (DSB)-to-MITE switch occurs.Penalty: A Decode Stream Buffer (DSB) hit followed by a Decode Stream Buffer (DSB) miss can cost up to six cycles in which no uops are delivered to the IDQ. Most often, such switches from the Decode Stream Buffer (DSB) to the legacy pipeline cost 0–2 cycles.
   , { 0x08,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.MISS_CAUSES_A_WALK" } // Counts demand data loads that caused a page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk need not have completed.
   , { 0x08,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.STLB_HIT" } // Counts loads that miss the DTLB (Data TLB) and hit the STLB (Second level TLB).
   , { 0x08,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_ACTIVE" } // Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a load.
   , { 0x08,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED" } // Counts completed page walks (all page sizes) caused by demand data loads. This implies it missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x08,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED_1G" } // Counts completed page walks (1G sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x08,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED_2M_4M" } // Counts completed page walks (2M/4M sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x08,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_COMPLETED_4K" } // Counts completed page walks (4K sizes) caused by demand data loads. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x08,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_LOAD_MISSES.WALK_PENDING" } // Counts 1 per cycle for each PMH that is busy with a page walk for a load. EPT page walk duration are excluded in Skylake microarchitecture.
   , { 0x49,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.MISS_CAUSES_A_WALK" } // Counts demand data stores that caused a page walk of any page size (4K/2M/4M/1G). This implies it missed in all TLB levels, but the walk need not have completed.
   , { 0x49,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.STLB_HIT" } // Stores that miss the DTLB (Data TLB) and hit the STLB (2nd Level TLB).
   , { 0x49,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_ACTIVE" } // Counts cycles when at least one PMH (Page Miss Handler) is busy with a page walk for a store.
   , { 0x49,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED" } // Counts completed page walks (all page sizes) caused by demand data stores. This implies it missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x49,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED_1G" } // Counts completed page walks (1G sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x49,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED_2M_4M" } // Counts completed page walks (2M/4M sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x49,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_COMPLETED_4K" } // Counts completed page walks (4K sizes) caused by demand data stores. This implies address translations missed in the DTLB and further levels of TLB. The page walk can end with or without a fault.
   , { 0x49,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "DTLB_STORE_MISSES.WALK_PENDING" } // Counts 1 per cycle for each PMH that is busy with a page walk for a store. EPT page walk duration are excluded in Skylake microarchitecture.
   , { 0x4F,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EPT.WALK_PENDING" } // Counts cycles for each PMH (Page Miss Handler) that is busy with an EPT (Extended Page Table) walk for any request type.
   , { 0xA6,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.1_PORTS_UTIL" } // Counts cycles during which a total of 1 uop was executed on all ports and Reservation Station (RS) was not empty.
   , { 0xA6,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.2_PORTS_UTIL" } // Counts cycles during which a total of 2 uops were executed on all ports and Reservation Station (RS) was not empty.
   , { 0xA6,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.3_PORTS_UTIL" } // Cycles total of 3 uops are executed on all ports and Reservation Station (RS) was not empty.
   , { 0xA6,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.4_PORTS_UTIL" } // Cycles total of 4 uops are executed on all ports and Reservation Station (RS) was not empty.
   , { 0xA6,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.BOUND_ON_STORES" } // Cycles where the Store Buffer was full and no outstanding load.
   , { 0xA6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "EXE_ACTIVITY.EXE_BOUND_0_PORTS" } // Counts cycles during which no uops were executed on all ports and Reservation Station (RS) was not empty.
   , { 0xC7,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.128B_PACKED_DOUBLE" } // Counts once for most SIMD 128-bit packed computational double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 2 computation operations, one for each element. Applies to packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.128B_PACKED_SINGLE" } // Counts once for most SIMD 128-bit packed computational single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 4 computation operations, one for each element. Applies to packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.256B_PACKED_DOUBLE" } // Counts once for most SIMD 256-bit packed double computational precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 4 computation operations, one for each element. Applies to packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.256B_PACKED_SINGLE" } // Counts once for most SIMD 256-bit packed single computational precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 8 computation operations, one for each element. Applies to packed single precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX SQRT RSQRT RCP DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x18,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.4_FLOPS" } // Number of SSE/AVX computational 128-bit packed single precision and 256-bit packed double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 2 or/and 4 computation operations, one for each element. Applies to SSE* and AVX* packed single precision floating-point and packed double precision floating-point instructions: ADD SUB HADD HSUB SUBADD MUL DIV MIN MAX RCP14 RSQRT14 SQRT DPP FM(N)ADD/SUB. DPP and FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x03,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.SCALAR" } // Counts once for most SIMD scalar computational single precision and double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SIMD scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.SCALAR_DOUBLE" } // Counts once for most SIMD scalar computational double precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SIMD scalar double precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.SCALAR_SINGLE" } // Counts once for most SIMD scalar computational single precision floating-point instructions retired; some instructions will count twice as noted below. Each count represents 1 computational operation. Applies to SIMD scalar single precision floating-point instructions: ADD SUB MUL DIV MIN MAX SQRT RSQRT RCP FM(N)ADD/SUB. FM(N)ADD/SUB instructions count twice as they perform 2 calculations per element. The DAZ and FTZ flags in the MXCSR register need to be set when using these events.
   , { 0xC7,                0xFC,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "FP_ARITH_INST_RETIRED.VECTOR" } // Number of any Vector retired FP arithmetic instructions
   , { 0xCA,                0x1E,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "FP_ASSIST.ANY" } // Counts cycles with any input and output SSE or x87 FP assist. If an input and output assist are detected on the same cycle the event increments by 1.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000001,    0x000000000000, "FRONTEND_RETIRED.ANY_DSB_MISS" } // Counts retired Instructions that experienced DSB (Decode stream buffer i.e. the decoded instruction-cache) miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000001,    0x000000000000, "FRONTEND_RETIRED.ANY_DSB_MISS_PS" } // Counts retired Instructions that experienced DSB (Decode stream buffer i.e. the decoded instruction-cache) miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000011,    0x000000000000, "FRONTEND_RETIRED.DSB_MISS" } // Number of retired Instructions that experienced a critical DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. Critical means stalls were exposed to the back-end as a result of the DSB miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000011,    0x000000000000, "FRONTEND_RETIRED.DSB_MISS_PS" } // Number of retired Instructions that experienced a critical DSB (Decode stream buffer i.e. the decoded instruction-cache) miss. Critical means stalls were exposed to the back-end as a result of the DSB miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000014,    0x000000000000, "FRONTEND_RETIRED.ITLB_MISS" } // Counts retired Instructions that experienced iTLB (Instruction TLB) true miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000014,    0x000000000000, "FRONTEND_RETIRED.ITLB_MISS_PS" } // Counts retired Instructions that experienced iTLB (Instruction TLB) true miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000012,    0x000000000000, "FRONTEND_RETIRED.L1I_MISS" } // Retired Instructions who experienced Instruction L1 Cache true miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000012,    0x000000000000, "FRONTEND_RETIRED.L1I_MISS_PS" } // Retired Instructions who experienced Instruction L1 Cache true miss. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000013,    0x000000000000, "FRONTEND_RETIRED.L2_MISS" } // Retired Instructions who experienced Instruction L2 Cache true miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000013,    0x000000000000, "FRONTEND_RETIRED.L2_MISS_PS" } // Retired Instructions who experienced Instruction L2 Cache true miss. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400106,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_1" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of at least 1 cycle which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x408006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_128" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 128 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x408006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_128_PS" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 128 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x401006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_16" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 16 cycles. During this period the front-end delivered no uops.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x401006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_16_PS" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 16 cycles. During this period the front-end delivered no uops.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 2 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x100206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1" } // Counts retired instructions that are delivered to the back-end after the front-end had at least 1 bubble-slot for a period of 2 cycles. A bubble-slot is an empty issue-pipeline slot while there was no RAT stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x100206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_1_PS" } // Counts retired instructions that are delivered to the back-end after the front-end had at least 1 bubble-slot for a period of 2 cycles. A bubble-slot is an empty issue-pipeline slot while there was no RAT stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x200206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_2" } // Retired instructions that are fetched after an interval where the front-end had at least 2 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x200206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_2_PS" } // Retired instructions that are fetched after an interval where the front-end had at least 2 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x300206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_3" } // Retired instructions that are fetched after an interval where the front-end had at least 3 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x300206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_BUBBLES_GE_3_PS" } // Retired instructions that are fetched after an interval where the front-end had at least 3 bubble-slots for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400206,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_2_PS" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 2 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x410006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_256" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 256 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x410006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_256_PS" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 256 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x402006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_32" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 32 cycles. During this period the front-end delivered no uops.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x402006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_32_PS" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 32 cycles. During this period the front-end delivered no uops.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400406,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_4" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 4 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400406,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_4_PS" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 4 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x420006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_512" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 512 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x420006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_512_PS" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 512 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x404006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_64" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 64 cycles which was not interrupted by a back-end stall.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x404006,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_64_PS" } // Retired instructions that are fetched after an interval where the front-end delivered no uops for a period of 64 cycles which was not interrupted by a back-end stall. Precise Event.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400806,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_8" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 8 cycles. During this period the front-end delivered no uops.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x400806,    0x000000000000, "FRONTEND_RETIRED.LATENCY_GE_8_PS" } // Counts retired instructions that are delivered to the back-end after a front-end stall of at least 8 cycles. During this period the front-end delivered no uops.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000015,    0x000000000000, "FRONTEND_RETIRED.STLB_MISS" } // Counts retired Instructions that experienced STLB (2nd level TLB) true miss.
   , { 0xC6,                0x01,  0,          0,         0,      0x00,  0x000,   0x000015,    0x000000000000, "FRONTEND_RETIRED.STLB_MISS_PS" } // Counts retired Instructions that experienced STLB (2nd level TLB) true miss.
   , { 0xC8,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED" } // Number of times HLE abort was triggered.
   , { 0xC8,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED_EVENTS" } // Number of times an HLE execution aborted due to unfriendly events (such as interrupts).
   , { 0xC8,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED_MEM" } // Number of times an HLE execution aborted due to various memory events (e.g., read/write capacity and conflicts).
   , { 0xC8,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED_MEMTYPE" } // Number of times an HLE execution aborted due to incompatible memory type.
   , { 0xC8,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED_PS" } // Number of times HLE abort was triggered. (PEBS)
   , { 0xC8,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED_TIMER" } // Number of times an HLE execution aborted due to hardware timer expiration.
   , { 0xC8,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.ABORTED_UNFRIENDLY" } // Number of times an HLE execution aborted due to HLE-unfriendly instructions and certain unfriendly events (such as AD assists etc.).
   , { 0xC8,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.COMMIT" } // Number of times HLE commit succeeded.
   , { 0xC8,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HLE_RETIRED.START" } // Number of times we entered an HLE region. Does not count nested transactions.
   , { 0xCB,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "HW_INTERRUPTS.RECEIVED" } // Counts the number of hardware interruptions received by the processor.
   , { 0x80,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE_16B.IFDATA_STALL" } // Cycles where a code line fetch is stalled due to an L1 instruction cache miss. The legacy decode pipeline works at a 16 Byte granularity.
   , { 0x83,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE_64B.IFTAG_HIT" } // Instruction fetch tag lookups that hit in the instruction cache (L1I). Counts at 64-byte cache-line granularity.
   , { 0x83,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE_64B.IFTAG_MISS" } // Instruction fetch tag lookups that miss in the instruction cache (L1I). Counts at 64-byte cache-line granularity.
   , { 0x83,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ICACHE_64B.IFTAG_STALL" } // Cycles where a code fetch is stalled due to L1 instruction cache tag miss.
   , { 0x79,                0x18,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "IDQ.ALL_DSB_CYCLES_4_UOPS" } // Counts the number of cycles 4 or more uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x18,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.ALL_DSB_CYCLES_ANY_UOPS" } // Counts the number of cycles uops were delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Count includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x24,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "IDQ.ALL_MITE_CYCLES_4_UOPS" } // Counts the number of cycles 4 uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. Counting includes uops that may 'bypass' the IDQ. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB).
   , { 0x79,                0x24,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.ALL_MITE_CYCLES_ANY_UOPS" } // Counts the number of cycles uops were delivered to the Instruction Decode Queue (IDQ) from the MITE (legacy decode pipeline) path. Counting includes uops that may 'bypass' the IDQ. During these cycles uops are not being delivered from the Decode Stream Buffer (DSB).
   , { 0x79,                0x08,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.DSB_CYCLES" } // Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.DSB_UOPS" } // Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the Decode Stream Buffer (DSB) path. Counting includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x04,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MITE_CYCLES" } // Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.MITE_UOPS" } // Counts the number of uops delivered to Instruction Decode Queue (IDQ) from the MITE path. Counting includes uops that may 'bypass' the IDQ. This also means that uops are not being delivered from the Decode Stream Buffer (DSB).
   , { 0x79,                0x30,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MS_CYCLES" } // Counts cycles during which uops are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ. Uops maybe initiated by Decode Stream Buffer (DSB) or MITE.
   , { 0x79,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MS_DSB_CYCLES" } // Counts cycles during which uops initiated by Decode Stream Buffer (DSB) are being delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.MS_MITE_UOPS" } // Counts the number of uops initiated by MITE and delivered to Instruction Decode Queue (IDQ) while the Microcode Sequencer (MS) is busy. Counting includes uops that may 'bypass' the IDQ.
   , { 0x79,                0x30,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ.MS_SWITCHES" } // Number of switches from DSB (Decode Stream Buffer) or MITE (legacy decode pipeline) to the Microcode Sequencer.
   , { 0x79,                0x30,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ.MS_UOPS" } // Counts the total number of uops delivered by the Microcode Sequencer (MS). Any instruction over 4 uops will be delivered by the MS. Some instructions such as transcendentals may additionally generate uops from the MS.
   , { 0x9C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CORE" } // Counts the number of uops not delivered to Resource Allocation Table (RAT) per thread adding “4 – x” when Resource Allocation Table (RAT) is not stalled and Instruction Decode Queue (IDQ) delivers x uops to Resource Allocation Table (RAT) (where x belongs to {0,1,2,3}). Counting does not cover cases when: a. IDQ-Resource Allocation Table (RAT) pipe serves the other thread. b. Resource Allocation Table (RAT) is stalled for the thread (including uop drops and clear BE conditions). c. Instruction Decode Queue (IDQ) delivers four uops.
   , { 0x9C,                0x01,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_0_UOPS_DELIV.CORE" } // Counts, on the per-thread basis, cycles when no uops are delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core =4.
   , { 0x9C,                0x01,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_FE_WAS_OK" } // Counts cycles FE delivered 4 uops or Resource Allocation Table (RAT) was stalling FE.
   , { 0x9C,                0x01,  0,          0,         0,      0x03,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_1_UOP_DELIV.CORE" } // Counts, on the per-thread basis, cycles when less than 1 uop is delivered to Resource Allocation Table (RAT). IDQ_Uops_Not_Delivered.core >= 3.
   , { 0x9C,                0x01,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_2_UOP_DELIV.CORE" } // Cycles with less than 2 uops delivered by the front-end.
   , { 0x9C,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "IDQ_UOPS_NOT_DELIVERED.CYCLES_LE_3_UOP_DELIV.CORE" } // Cycles with less than 3 uops delivered by the front-end.
   , { 0x87,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ILD_STALL.LCP" } // Counts cycles that the Instruction Length decoder (ILD) stalls occurred due to dynamically changing prefix length of the decoded instruction (by operand size prefix instruction 0x66, address size prefix instruction 0x67 or REX.W for Intel64). Count is proportional to the number of prefixes in a 16B-line. This may result in a three-cycle penalty for each LCP (Length changing prefix) in a 16-byte chunk.
   , { 0x55,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_DECODED.DECODERS" } // Number of decoders utilized in a cycle when the MITE (legacy decode pipeline) fetches instructions.
   , { 0xC0,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.NOP" } // Number of all retired NOP instructions.
   , { 0xC0,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.NOP_PS" } // Number of all retired NOP instructions.
   , { 0xC0,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.PREC_DIST" } // A version of INST_RETIRED that allows for a more unbiased distribution of samples across instructions retired. It utilizes the Precise Distribution of Instructions Retired (PDIR) feature to mitigate some bias in how retired instructions get sampled.
   , { 0xC0,                0x01,  0,          0,         1,      0x0A,  0x000,   0x000000,    0x000000000000, "INST_RETIRED.TOTAL_CYCLES_PS" } // Number of cycles using an always true condition applied to PEBS instructions retired event. (inst_ret< 16)
   , { 0x0D,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_MISC.CLEAR_RESTEER_CYCLES" } // Cycles the issue-stage is waiting for front-end to fetch from resteered path following branch misprediction or machine clear events.
   , { 0x0D,                0x01,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "INT_MISC.CLEARS_COUNT" } // Counts the number of speculative clears due to any type of branch misprediction or machine clears
   , { 0x0D,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_MISC.RECOVERY_CYCLES" } // Core cycles the Resource allocator was stalled due to recovery from an earlier branch misprediction or machine clear event.
   , { 0x0D,                0x01,  0,          1,         0,      0x00,  0x000,   0x000000,    0x000000000000, "INT_MISC.RECOVERY_CYCLES_ANY" } // Core cycles the allocator was stalled due to recovery from earlier clear event for any thread running on the physical core (e.g. misprediction or memory nuke).
   , { 0xAE,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB.ITLB_FLUSH" } // Counts the number of flushes of the big or small ITLB pages. Counting include both TLB Flush (covering all sets) and TLB Set Clear (set-specific).
   , { 0x85,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.MISS_CAUSES_A_WALK" } // Counts page walks of any page size (4K/2M/4M/1G) caused by a code fetch. This implies it missed in the ITLB and further levels of TLB, but the walk need not have completed.
   , { 0x85,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.STLB_HIT" } // Instruction fetch requests that miss the ITLB and hit the STLB.
   , { 0x85,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_ACTIVE" } // Cycles when at least one PMH is busy with a page walk for code (instruction fetch) request. EPT page walk duration are excluded in Skylake microarchitecture.
   , { 0x85,                0x0E,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED" } // Counts completed page walks (all page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.
   , { 0x85,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED_1G" } // Counts completed page walks (1G page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.
   , { 0x85,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED_2M_4M" } // Counts completed page walks (2M/4M page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.
   , { 0x85,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_COMPLETED_4K" } // Counts completed page walks (4K page sizes) caused by a code fetch. This implies it missed in the ITLB (Instruction TLB) and further levels of TLB. The page walk can end with or without a fault.
   , { 0x85,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ITLB_MISSES.WALK_PENDING" } // Counts 1 per cycle for each PMH (Page Miss Handler) that is busy with a page walk for an instruction fetch request. EPT page walk duration are excluded in Skylake microarchitecture.
   , { 0x51,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D.REPLACEMENT" } // Counts L1D data line replacements including opportunistic replacements, and replacements that require stall-for-replace or block-for-replace.
   , { 0x48,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.FB_FULL" } // Number of times a request needed a FB (Fill Buffer) entry but there was no entry available for it. A request includes cacheable/uncacheable demands that are load, store or SW prefetch instructions.
   , { 0x48,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.PENDING" } // Counts duration of L1D miss outstanding, that is each cycle number of Fill Buffers (FB) outstanding required by Demand Reads. FB either is held by demand loads, or it is held by non-demand loads and gets hit at least once by demand. The valid outstanding interval is defined until the FB deallocation by one of the following ways: from FB allocation, if FB is allocated by demand from the demand Hit FB, if it is allocated by hardware or software prefetch.Note: In the L1D, a Demand Read contains cacheable or noncacheable demand loads, including ones causing cache-line splits and reads due to page walks resulted from any request type.
   , { 0x48,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.PENDING_CYCLES" } // Counts duration of L1D miss outstanding in cycles.
   , { 0x48,                0x01,  0,          1,         0,      0x01,  0x000,   0x000000,    0x000000000000, "L1D_PEND_MISS.PENDING_CYCLES_ANY" } // Cycles with L1D load Misses outstanding from any thread on physical core.
   , { 0xF1,                0x1F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_IN.ALL" } // Counts the number of L2 cache lines filling the L2. Counting does not cover rejects.
   , { 0xF2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_OUT.NON_SILENT" } // Counts the number of lines that are evicted by L2 cache when triggered by an L2 cache fill. Those lines are in Modified state. Modified lines are written back to L3
   , { 0xF2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_OUT.SILENT" } // Counts the number of lines that are silently dropped by L2 cache when triggered by an L2 cache fill. These lines are typically in Shared or Exclusive state. A non-threaded event.
   , { 0xF2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_OUT.USELESS_HWPF" } // Counts the number of lines that have been hardware prefetched but not used and now evicted by L2 cache
   , { 0x24,                0xE4,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_CODE_RD" } // Counts the total number of L2 code requests.
   , { 0x24,                0xE1,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_DEMAND_DATA_RD" } // Counts the number of demand Data Read requests (including requests from L1D hardware prefetchers). These loads may hit or miss L2 cache. Only non rejected loads are counted.
   , { 0x24,                0x27,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_DEMAND_MISS" } // Demand requests that miss L2 cache.
   , { 0x24,                0xE7,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_DEMAND_REFERENCES" } // Demand requests to L2 cache.
   , { 0x24,                0xF8,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_PF" } // Counts the total number of requests from the L2 hardware prefetchers.
   , { 0x24,                0xE2,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.ALL_RFO" } // Counts the total number of RFO (read for ownership) requests to L2 cache. L2 RFO requests include both L1D demand RFO misses as well as L1D RFO prefetches.
   , { 0x24,                0xC4,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.CODE_RD_HIT" } // Counts L2 cache hits when fetching instructions, code reads.
   , { 0x24,                0x24,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.CODE_RD_MISS" } // Counts L2 cache misses when fetching instructions.
   , { 0x24,                0xC1,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.DEMAND_DATA_RD_HIT" } // Counts the number of demand Data Read requests, initiated by load instructions, that hit L2 cache
   , { 0x24,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.DEMAND_DATA_RD_MISS" } // Counts the number of demand Data Read requests that miss L2 cache. Only not rejected loads are counted.
   , { 0x24,                0x3F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.MISS" } // All requests that miss L2 cache.
   , { 0x24,                0xD8,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.PF_HIT" } // Counts requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that hit L2 cache.
   , { 0x24,                0x38,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.PF_MISS" } // Counts requests from the L1/L2/L3 hardware prefetchers or Load software prefetches that miss L2 cache.
   , { 0x24,                0xFF,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.REFERENCES" } // All L2 requests.
   , { 0x24,                0xC2,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.RFO_HIT" } // Counts the RFO (Read-for-Ownership) requests that hit L2 cache.
   , { 0x24,                0x22,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_RQSTS.RFO_MISS" } // Counts the RFO (Read-for-Ownership) requests that miss L2 cache.
   , { 0xF0,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_TRANS.L2_WB" } // Counts L2 writebacks that access L2 cache.
   , { 0x03,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.NO_SR" } // The number of times that split load operations are temporarily blocked because all resources for handling the split accesses are in use.
   , { 0x03,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS.STORE_FORWARD" } // Counts the number of times where store forwarding was prevented for a load operation. The most common case is a load blocked due to the address of memory access (partially) overlapping with a preceding uncompleted store. Note: See the table of not supported store forwards in the Optimization Guide.
   , { 0x07,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LD_BLOCKS_PARTIAL.ADDRESS_ALIAS" } // Counts false dependencies in MOB when the partial comparison upon loose net check and dependency was resolved by the Enhanced Loose net mechanism. This may not result in high performance penalties. Loose net checks can fail when loads and stores are 4k aliased.
   , { 0x4C,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LOAD_HIT_PRE.SW_PF" } // Counts all not software-prefetch load dispatches that hit the fill buffer (FB) allocated for the software prefetch. It can also be incremented by some lock instructions. So it should only be used with profiling so that the locks can be excluded by ASM (Assembly File) inspection of the nearby instructions.
   , { 0xA8,                0x01,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "LSD.CYCLES_4_UOPS" } // Counts the cycles when 4 uops are delivered by the LSD (Loop-stream detector).
   , { 0xA8,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "LSD.CYCLES_ACTIVE" } // Counts the cycles when at least one uop is delivered by the LSD (Loop-stream detector).
   , { 0xA8,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "LSD.UOPS" } // Number of uops delivered to the back-end by the LSD(Loop Stream Detector).
   , { 0xC3,                0x01,  1,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.COUNT" } // Number of machine clears (nukes) of any type.
   , { 0xC3,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.MEMORY_ORDERING" } // Counts the number of memory ordering Machine Clears detected. Memory Ordering Machine Clears can result from one of the following:a. memory disambiguation,b. external snoop, orc. cross SMT-HW-thread snoop (stores) hitting load buffer.
   , { 0xC3,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MACHINE_CLEARS.SMC" } // Counts self-modifying code (SMC) detected, which causes a machine clear.
   , { 0xD0,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ALL_LOADS" } // Counts all retired load instructions. This event accounts for SW prefetch instructions of PREFETCHNTA or PREFETCHT0/1/2 or PREFETCHW.
   , { 0xD0,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ALL_LOADS_PS" } // Counts all retired load instructions. This event accounts for SW prefetch instructions of PREFETCHNTA or PREFETCHT0/1/2 or PREFETCHW. (Precise Event)
   , { 0xD0,                0x82,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ALL_STORES" } // Counts all retired store instructions.
   , { 0xD0,                0x82,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ALL_STORES_PS" } // Counts all retired store instructions. (Precise Event)
   , { 0xD0,                0x83,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ANY" } // Counts all retired memory instructions - loads and stores.
   , { 0xD0,                0x83,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.ANY_PS" } // Counts all retired memory instructions - loads and stores.
   , { 0xD0,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.LOCK_LOADS" } // Retired load instructions with locked access.
   , { 0xD0,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.LOCK_LOADS_PS" } // Retired load instructions with locked access. (Precise Event)
   , { 0xD0,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.SPLIT_LOADS" } // Counts retired load instructions that split across a cacheline boundary.
   , { 0xD0,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.SPLIT_LOADS_PS" } // Retired load instructions that split across a cacheline boundary. (Precise Event)
   , { 0xD0,                0x42,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.SPLIT_STORES" } // Counts retired store instructions that split across a cacheline boundary.
   , { 0xD0,                0x42,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.SPLIT_STORES_PS" } // Retired store instructions that split across a cacheline boundary. (Precise Event)
   , { 0xD0,                0x11,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.STLB_MISS_LOADS" } // Number of retired load instructions that (start a) miss in the 2nd-level TLB (STLB).
   , { 0xD0,                0x11,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.STLB_MISS_LOADS_PS" } // Number of retired load instructions that (start a) miss in the 2nd-level TLB (STLB).
   , { 0xD0,                0x12,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.STLB_MISS_STORES" } // Number of retired store instructions that (start a) miss in the 2nd-level TLB (STLB).
   , { 0xD0,                0x12,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_INST_RETIRED.STLB_MISS_STORES_PS" } // Number of retired store instructions that (start a) miss in the 2nd-level TLB (STLB).
   , { 0xD2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_HIT" } // Retired load instructions which data sources were L3 and cross-core snoop hits in on-pkg core cache.
   , { 0xD2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_HIT_PS" } // Retired load instructions which data sources were L3 and cross-core snoop hits in on-pkg core cache.
   , { 0xD2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_HITM" } // Retired load instructions which data sources were HitM responses from shared L3.
   , { 0xD2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_HITM_PS" } // Retired load instructions which data sources were HitM responses from shared L3.
   , { 0xD2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS" } // Retired load instructions which data sources were L3 hit and cross-core snoop missed in on-pkg core cache.
   , { 0xD2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_MISS_PS" } // Retired load instructions which data sources were L3 hit and cross-core snoop missed in on-pkg core cache.
   , { 0xD2,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE" } // Retired load instructions which data sources were hits in L3 without snoops required.
   , { 0xD2,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_L3_HIT_RETIRED.XSNP_NONE_PS" } // Retired load instructions which data sources were hits in L3 without snoops required.
   , { 0xD4,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_MISC_RETIRED.UC" } // Retired instructions with at least 1 uncacheable load or lock.
   , { 0xD4,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_MISC_RETIRED.UC_PS" } // Retired instructions with at least 1 uncacheable load or lock.
   , { 0xD1,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.FB_HIT" } // Counts retired load instructions with at least one uop was load missed in L1 but hit FB (Fill Buffers) due to preceding miss to the same cache line with data not ready.
   , { 0xD1,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.FB_HIT_PS" } // Counts retired load instructions with at least one uop was load missed in L1 but hit FB (Fill Buffers) due to preceding miss to the same cache line with data not ready.
   , { 0xD1,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L1_HIT" } // Counts retired load instructions with at least one uop that hit in the L1 data cache. This event includes all SW prefetches and lock instructions regardless of the data source.
   , { 0xD1,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L1_HIT_PS" } // Counts retired load instructions with at least one uop that hit in the L1 data cache. This event includes all SW prefetches and lock instructions regardless of the data source.
   , { 0xD1,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L1_MISS" } // Counts retired load instructions with at least one uop that missed in the L1 cache.
   , { 0xD1,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L1_MISS_PS" } // Counts retired load instructions with at least one uop that missed in the L1 cache.
   , { 0xD1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L2_HIT" } // Retired load instructions with L2 cache hits as data sources.
   , { 0xD1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L2_HIT_PS" } // Retired load instructions with L2 cache hits as data sources.
   , { 0xD1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L2_MISS" } // Retired load instructions missed L2 cache as data sources.
   , { 0xD1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L2_MISS_PS" } // Retired load instructions missed L2 cache as data sources.
   , { 0xD1,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L3_HIT" } // Counts retired load instructions with at least one uop that hit in the L3 cache.
   , { 0xD1,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L3_HIT_PS" } // Retired load instructions with L3 cache hits as data sources.
   , { 0xD1,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L3_MISS" } // Counts retired load instructions with at least one uop that missed in the L3 cache.
   , { 0xD1,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEM_LOAD_RETIRED.L3_MISS_PS" } // Retired load instructions missed L3 cache as data sources.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x080,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_128" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 128 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x010,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_16" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 16 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x100,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_256" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 256 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x020,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_32" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 32 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x004,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_4" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 4 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x200,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_512" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 512 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x040,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_64" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 64 cycles. Reported latency may be longer than just the memory latency.
   , { 0xCD,                0x01,  0,          0,         0,      0x00,  0x008,   0x000000,    0x000000000000, "MEM_TRANS_RETIRED.LOAD_LATENCY_GT_8" } // Counts randomly selected loads when the latency from first dispatch to completion is greater than 8 cycles. Reported latency may be longer than just the memory latency.
   , { 0x09,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "MEMORY_DISAMBIGUATION.HISTORY_RESET" } // MEMORY_DISAMBIGUATION.HISTORY_RESET
   , { 0xB0,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.ALL_DATA_RD" } // Counts the demand and prefetch data reads. All Core Data Reads include cacheable 'Demands' and L2 prefetchers (not L3 prefetchers). Counting also covers reads due to page walks resulted from any request type.
   , { 0xB0,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.ALL_REQUESTS" } // Counts memory transactions reached the super queue including requests initiated by the core, all L3 prefetches, page walks, etc..
   , { 0xB0,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DEMAND_CODE_RD" } // Counts both cacheable and non-cacheable code read requests.
   , { 0xB0,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DEMAND_DATA_RD" } // Counts the Demand Data Read requests sent to uncore. Use it in conjunction with OFFCORE_REQUESTS_OUTSTANDING to determine average latency in the uncore.
   , { 0xB0,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.DEMAND_RFO" } // Counts the demand RFO (read for ownership) requests including regular RFOs, locks, ItoM.
   , { 0xB0,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS.L3_MISS_DEMAND_DATA_RD" } // Demand Data Read requests who miss L3 cache.
   , { 0xB2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_BUFFER.SQ_FULL" } // Counts the number of cases when the offcore requests buffer cannot take more entries for the core. This can happen when the superqueue does not contain eligible entries, or when L1D writeback pending FIFO requests is full.Note: Writeback pending FIFO has six entries.
   , { 0x60,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.ALL_DATA_RD" } // Counts the number of offcore outstanding cacheable Core Data Read transactions in the super queue every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.
   , { 0x60,                0x08,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DATA_RD" } // Counts cycles when offcore outstanding cacheable Core Data Read transactions are present in the super queue. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.
   , { 0x60,                0x02,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_CODE_RD" } // Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.
   , { 0x60,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_DATA_RD" } // Counts cycles when offcore outstanding Demand Data Read transactions are present in the super queue (SQ). A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation).
   , { 0x60,                0x04,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_DEMAND_RFO" } // Counts the number of offcore outstanding demand rfo Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.
   , { 0x60,                0x10,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.CYCLES_WITH_L3_MISS_DEMAND_DATA_RD" } // Cycles with at least 1 Demand Data Read requests who miss L3 cache in the superQ.
   , { 0x60,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_CODE_RD" } // Counts the number of offcore outstanding Code Reads transactions in the super queue every cycle. The 'Offcore outstanding' state of the transaction lasts from the L2 miss until the sending transaction completion to requestor (SQ deallocation). See the corresponding Umask under OFFCORE_REQUESTS.
   , { 0x60,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD" } // Counts the number of offcore outstanding Demand Data Read transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor. See the corresponding Umask under OFFCORE_REQUESTS.Note: A prefetch promoted to Demand is counted from the promotion point.
   , { 0x60,                0x01,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_DATA_RD_GE_6" } // Cycles with at least 6 offcore outstanding Demand Data Read transactions in uncore queue.
   , { 0x60,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.DEMAND_RFO" } // Counts the number of offcore outstanding RFO (store) transactions in the super queue (SQ) every cycle. A transaction is considered to be in the Offcore outstanding state between L2 miss and transaction completion sent to requestor (SQ de-allocation). See corresponding Umask under OFFCORE_REQUESTS.
   , { 0x60,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD" } // Counts number of Offcore outstanding Demand Data Read requests that miss L3 cache in the superQ every cycle.
   , { 0x60,                0x10,  0,          0,         0,      0x06,  0x000,   0x000000,    0x000000000000, "OFFCORE_REQUESTS_OUTSTANDING.L3_MISS_DEMAND_DATA_RD_GE_6" } // Cycles with at least 6 Demand Data Read requests that miss L3 cache in the superQ.
   , { 0xC1,                0x3F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "OTHER_ASSISTS.ANY" } // Number of times a microcode assist is invoked by HW other than FP-assist. Examples include AD (page Access Dirty) and AVX* related assists.
   , { 0x59,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "PARTIAL_RAT_STALLS.SCOREBOARD" } // This event counts cycles during which the microcode scoreboard stalls happen.
   , { 0xA2,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RESOURCE_STALLS.ANY" } // Counts resource-related stall cycles.
   , { 0xA2,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RESOURCE_STALLS.SB" } // Counts allocation stall cycles caused by the store buffer (SB) being full. This counts cycles that the pipeline back-end blocked uop delivery from the front-end.
   , { 0xCC,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ROB_MISC_EVENTS.LBR_INSERTS" } // Increments when an entry is added to the Last Branch Record (LBR) array (or removed from the array in case of RETURNs in call stack mode). The event requires LBR enable via IA32_DEBUGCTL MSR and branch type selection via MSR_LBR_SELECT.
   , { 0xCC,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "ROB_MISC_EVENTS.PAUSE_INST" } // Number of retired PAUSE instructions (that do not end up with a VMExit to the VMM; TSX aborted Instructions may be counted). This event is not supported on first SKL and KBL products.
   , { 0x5E,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RS_EVENTS.EMPTY_CYCLES" } // Counts cycles during which the reservation station (RS) is empty for the thread.; Note: In ST-mode, not active thread should drive 0. This is usually caused by severely costly branch mispredictions, or allocator/FE issues.
   , { 0x5E,                0x01,  1,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "RS_EVENTS.EMPTY_END" } // Counts end of periods where the Reservation Station (RS) was empty. Could be useful to precisely locate front-end Latency Bound issues.
   , { 0xC9,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED" } // Number of times RTM abort was triggered.
   , { 0xC9,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED_EVENTS" } // Number of times an RTM execution aborted due to none of the previous 4 categories (e.g. interrupt).
   , { 0xC9,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED_MEM" } // Number of times an RTM execution aborted due to various memory events (e.g. read/write capacity and conflicts).
   , { 0xC9,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED_MEMTYPE" } // Number of times an RTM execution aborted due to incompatible memory type.
   , { 0xC9,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED_PS" } // Number of times RTM abort was triggered. (PEBS)
   , { 0xC9,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED_TIMER" } // Number of times an RTM execution aborted due to uncommon conditions.
   , { 0xC9,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.ABORTED_UNFRIENDLY" } // Number of times an RTM execution aborted due to HLE-unfriendly instructions.
   , { 0xC9,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.COMMIT" } // Number of times RTM commit succeeded.
   , { 0xC9,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "RTM_RETIRED.START" } // Number of times we entered an RTM region. Does not count nested transactions.
   , { 0xF4,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SQ_MISC.SPLIT_LOCK" } // Counts the number of cache line split locks sent to the uncore.
   , { 0x32,                0x0F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.ANY" } // Counts the number of PREFETCHNTA, PREFETCHW, PREFETCHT0, PREFETCHT1 or PREFETCHT2 instructions executed.
   , { 0x32,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.NTA" } // Number of PREFETCHNTA instructions executed.
   , { 0x32,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.PREFETCHW" } // Number of PREFETCHW instructions executed.
   , { 0x32,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.T0" } // Number of PREFETCHT0 instructions executed.
   , { 0x32,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "SW_PREFETCH_ACCESS.T1_T2" } // Number of PREFETCHT1 or PREFETCHT2 instructions executed.
   , { 0xBD,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TLB_FLUSH.DTLB_THREAD" } // Counts the number of DTLB flush attempts of the thread-specific entries.
   , { 0xBD,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TLB_FLUSH.STLB_ANY" } // Counts the number of any STLB flush attempts (such as entire, VPID, PCID, InvPage, CR3 write, etc.).
   , { 0x5D,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_EXEC.MISC1" } // Counts the number of times a class of instructions that may cause a transactional abort was executed. Since this is the count of execution, it may not always cause a transactional abort.
   , { 0x5D,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_EXEC.MISC2" } // Unfriendly TSX abort triggered by a vzeroupper instruction.
   , { 0x5D,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_EXEC.MISC3" } // Unfriendly TSX abort triggered by a nest count that is too deep.
   , { 0x5D,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_EXEC.MISC4" } // RTM region detected inside HLE.
   , { 0x5D,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_EXEC.MISC5" } // Counts the number of times an HLE XACQUIRE instruction was executed inside an RTM transactional region.
   , { 0x54,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.ABORT_CAPACITY" } // Number of times a transactional abort was signaled due to a data capacity limitation for transactional reads or writes.
   , { 0x54,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.ABORT_CONFLICT" } // Number of times a TSX line had a cache conflict.
   , { 0x54,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.ABORT_HLE_ELISION_BUFFER_MISMATCH" } // Number of times a TSX Abort was triggered due to release/commit but data and address mismatch.
   , { 0x54,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.ABORT_HLE_ELISION_BUFFER_NOT_EMPTY" } // Number of times a TSX Abort was triggered due to commit but Lock Buffer not empty.
   , { 0x54,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.ABORT_HLE_ELISION_BUFFER_UNSUPPORTED_ALIGNMENT" } // Number of times a TSX Abort was triggered due to attempting an unsupported alignment from Lock Buffer.
   , { 0x54,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.ABORT_HLE_STORE_TO_ELIDED_LOCK" } // Number of times a TSX Abort was triggered due to a non-release/commit store to lock.
   , { 0x54,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "TX_MEM.HLE_ELISION_BUFFER_FULL" } // Number of times we could not allocate Lock Buffer.
   , { 0xA1,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_0" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 0.
   , { 0xA1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_1" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 1.
   , { 0xA1,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_2" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 2.
   , { 0xA1,                0x08,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_3" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 3.
   , { 0xA1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_4" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 4.
   , { 0xA1,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_5" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 5.
   , { 0xA1,                0x40,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_6" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 6.
   , { 0xA1,                0x80,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_DISPATCHED_PORT.PORT_7" } // Counts, on the per-thread basis, cycles during which at least one uop is dispatched from the Reservation Station (RS) to port 7.
   , { 0xB1,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE" } // Number of uops executed from any thread.
   , { 0xB1,                0x02,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_1" } // Cycles at least 1 micro-op is executed from any thread on physical core.
   , { 0xB1,                0x02,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_2" } // Cycles at least 2 micro-op is executed from any thread on physical core.
   , { 0xB1,                0x02,  0,          0,         0,      0x03,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_3" } // Cycles at least 3 micro-op is executed from any thread on physical core.
   , { 0xB1,                0x02,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_GE_4" } // Cycles at least 4 micro-op is executed from any thread on physical core.
   , { 0xB1,                0x02,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CORE_CYCLES_NONE" } // Cycles with no micro-ops executed from any thread on physical core.
   , { 0xB1,                0x01,  0,          0,         0,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_1_UOP_EXEC" } // Cycles where at least 1 uop was executed per-thread.
   , { 0xB1,                0x01,  0,          0,         0,      0x02,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_2_UOPS_EXEC" } // Cycles where at least 2 uops were executed per-thread.
   , { 0xB1,                0x01,  0,          0,         0,      0x03,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_3_UOPS_EXEC" } // Cycles where at least 3 uops were executed per-thread.
   , { 0xB1,                0x01,  0,          0,         0,      0x04,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.CYCLES_GE_4_UOPS_EXEC" } // Cycles where at least 4 uops were executed per-thread.
   , { 0xB1,                0x01,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.STALL_CYCLES" } // Counts cycles during which no uops were dispatched from the Reservation Station (RS) per thread.
   , { 0xB1,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.THREAD" } // Number of uops to be executed per-thread each cycle.
   , { 0xB1,                0x10,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_EXECUTED.X87" } // Counts the number of x87 uops executed.
   , { 0x0E,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.ANY" } // Counts the number of uops that the Resource Allocation Table (RAT) issues to the Reservation Station (RS).
   , { 0x0E,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.SLOW_LEA" } // Number of slow LEA uops being allocated. A uop is generally considered SlowLea if it has 3 sources (e.g. 2 sources + immediate) regardless if as a result of LEA instruction or not.
   , { 0x0E,                0x01,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.STALL_CYCLES" } // Counts cycles during which the Resource Allocation Table (RAT) does not issue any Uops to the reservation station (RS) for the current thread.
   , { 0x0E,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_ISSUED.VECTOR_WIDTH_MISMATCH" } // Counts the number of Blend Uops issued by the Resource Allocation Table (RAT) to the reservation station (RS) in order to preserve upper bits of vector registers. Starting with the Skylake microarchitecture, these Blend uops are needed since every Intel SSE instruction executed in Dirty Upper State needs to preserve bits 128-255 of the destination register. For more information, refer to “Mixing Intel AVX and Intel SSE Code” section of the Optimization Guide.
   , { 0xC2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.MACRO_FUSED" } // Counts the number of macro-fused uops retired. (non precise)
   , { 0xC2,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.RETIRE_SLOTS" } // Counts the retirement slots used.
   , { 0xC2,                0x02,  0,          0,         1,      0x01,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.STALL_CYCLES" } // This event counts cycles without actually retired uops.
   , { 0xC2,                0x02,  0,          0,         1,      0x10,  0x000,   0x000000,    0x000000000000, "UOPS_RETIRED.TOTAL_CYCLES" } // Number of cycles using always true condition (uops_ret < 16) applied to non PEBS uops retired event.
   , { 0xF2,                0x04,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "L2_LINES_OUT.USELESS_PREF" } // This event is deprecated. Refer to new event L2_LINES_OUT.USELESS_HWPF
   , { 0x84,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_COH_TRK_REQUESTS.ALL" } // Number of entries allocated. Account for Any type: e.g. Snoop, Core aperture, etc.
   , { 0x80,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_OCCUPANCY.ALL" } // Number of all Core entries outstanding for the memory controller. The outstanding interval starts after LLC miss till return of first data chunk. Accounts for Coherent and non-coherent traffic.
   , { 0x80,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_OCCUPANCY.CYCLES_WITH_ANY_REQUEST" } // Cycles with at least one request outstanding is waiting for data return from memory controller. Account for coherent and non-coherent requests initiated by IA Cores, Processor Graphics Unit, or LLC.
   , { 0x80,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_OCCUPANCY.DATA_READ" } // Number of Core Data Read entries outstanding for the memory controller. The outstanding interval starts after LLC miss till return of first data chunk.
   , { 0x81,                0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_REQUESTS.ALL" } // UNC_ARB_TRK_REQUESTS.ALL
   , { 0x81,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_REQUESTS.DATA_READ" } // Number of Core coherent Data Read requests sent to memory controller whose data is returned directly to requesting agent.
   , { 0x81,                0x02,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_REQUESTS.DRD_DIRECT" } // Number of Core coherent Data Read requests sent to memory controller whose data is returned directly to requesting agent.
   , { 0x81,                0x20,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_ARB_TRK_REQUESTS.WRITES" } // Number of Writes allocated - any write transactions: full/partials writes and evictions.
   , { 0x34,                0x86,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.ANY_ES" } // L3 Lookup any request that access cache and found line in E or S-state.
   , { 0x34,                0x88,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.ANY_I" } // L3 Lookup any request that access cache and found line in I-state.
   , { 0x34,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.ANY_M" } // L3 Lookup any request that access cache and found line in M-state.
   , { 0x34,                0x8F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.ANY_MESI" } // L3 Lookup any request that access cache and found line in MESI-state.
   , { 0x34,                0x16,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.READ_ES" } // L3 Lookup read request that access cache and found line in E or S-state.
   , { 0x34,                0x18,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.READ_I" } // L3 Lookup read request that access cache and found line in I-state.
   , { 0x34,                0x1F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.READ_MESI" } // L3 Lookup read request that access cache and found line in any MESI-state.
   , { 0x34,                0x26,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.WRITE_ES" } // L3 Lookup write request that access cache and found line in E or S-state.
   , { 0x34,                0x21,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.WRITE_M" } // L3 Lookup write request that access cache and found line in M-state.
   , { 0x34,                0x2F,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_CACHE_LOOKUP.WRITE_MESI" } // L3 Lookup write request that access cache and found line in MESI-state.
   , { 0x22,                0x44,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_XSNP_RESPONSE.HIT_XCORE" } // A cross-core snoop initiated by this Cbox due to processor core memory request which hits a non-modified line in some processor core.
   , { 0x22,                0x48,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_XSNP_RESPONSE.HITM_XCORE" } // A cross-core snoop initiated by this Cbox due to processor core memory request which hits a modified line in some processor core.
   , { 0x22,                0x81,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_XSNP_RESPONSE.MISS_EVICTION" } // A cross-core snoop resulted from L3 Eviction which misses in some processor core.
   , { 0x22,                0x41,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000000000, "UNC_CBO_XSNP_RESPONSE.MISS_XCORE" } // A cross-core snoop initiated by this Cbox due to processor core memory request which misses in some processor core.
/*   
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FFC408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00203C408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00103C408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00043C408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00023C408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00013C408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000BC408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00007C408000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC4008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002004008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001004008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000404008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000204008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000104008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000084008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000044008000, "OFFCORE_RESPONSE:request=OTHER: response=L3_MISS_LOCAL_DRAM.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040408000, "OFFCORE_RESPONSE:request=OTHER: response=L4_HIT_LOCAL_L4.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC01C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0020001C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010001C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0004001C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0002001C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0001001C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000801C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000401C8000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040108000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_S.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040088000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_E.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040048000, "OFFCORE_RESPONSE:request=OTHER: response=L3_HIT_M.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.ANY_SNOOP" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SNOOP_NON_DRAM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SNOOP_HITM" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SNOOP_HIT_NO_FWD" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SNOOP_MISS" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SNOOP_NOT_NEEDED" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SNOOP_NONE" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040028000, "OFFCORE_RESPONSE:request=OTHER: response=SUPPLIER_NONE.SPL_HIT" } // Counts any other requests
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000018000, "OFFCORE_RESPONSE:request=OTHER: response=ANY_RESPONSE" } // Counts any other requests have any response type.
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FFC400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00203C400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00103C400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00043C400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00023C400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00013C400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000BC400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00007C400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC4000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002004000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001004000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000404000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000204000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000104000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000084000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000044000004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_MISS_LOCAL_DRAM.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040400004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L4_HIT_LOCAL_L4.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC01C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0020001C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010001C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0004001C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0002001C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0001001C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000801C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000401C0004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040100004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_S.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040080004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_E.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040040004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=L3_HIT_M.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.ANY_SNOOP" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SNOOP_NON_DRAM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SNOOP_HITM" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SNOOP_HIT_NO_FWD" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SNOOP_MISS" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SNOOP_NOT_NEEDED" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SNOOP_NONE" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040020004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=SUPPLIER_NONE.SPL_HIT" } // Counts all demand code reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010004, "OFFCORE_RESPONSE:request=DEMAND_CODE_RD: response=ANY_RESPONSE" } // Counts all demand code reads have any response type.
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FFC400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00203C400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00103C400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00043C400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00023C400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00013C400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000BC400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00007C400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC4000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002004000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001004000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000404000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000204000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000104000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000084000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000044000002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_MISS_LOCAL_DRAM.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040400002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L4_HIT_LOCAL_L4.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC01C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0020001C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010001C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0004001C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0002001C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0001001C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000801C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000401C0002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040100002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_S.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040080002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_E.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040040002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=L3_HIT_M.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.ANY_SNOOP" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SNOOP_NON_DRAM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SNOOP_HITM" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SNOOP_HIT_NO_FWD" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SNOOP_MISS" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SNOOP_NOT_NEEDED" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SNOOP_NONE" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040020002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=SUPPLIER_NONE.SPL_HIT" } // Counts all demand data writes (RFOs)
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010002, "OFFCORE_RESPONSE:request=DEMAND_RFO: response=ANY_RESPONSE" } // Counts all demand data writes (RFOs) have any response type.
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FFC400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00203C400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00103C400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00043C400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00023C400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00013C400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000BC400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x00007C400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC4000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002004000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001004000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000404000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000204000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000104000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000084000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000044000001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_MISS_LOCAL_DRAM.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040400001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L4_HIT_LOCAL_L4.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC01C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0020001C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0010001C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0004001C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0002001C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0001001C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000801C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x0000401C0001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040100001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_S.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040080001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_E.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040040001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=L3_HIT_M.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x003FC0020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.ANY_SNOOP" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x002000020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SNOOP_NON_DRAM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x001000020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SNOOP_HITM" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000400020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SNOOP_HIT_NO_FWD" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000200020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SNOOP_MISS" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000100020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SNOOP_NOT_NEEDED" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000080020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SNOOP_NONE" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000040020001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=SUPPLIER_NONE.SPL_HIT" } // Counts demand data reads
   , { 0x{B7H,BBH},         0x01,  0,          0,         0,      0x00,  0x000,   0x000000,    0x000000010001, "OFFCORE_RESPONSE:request=DEMAND_DATA_RD: response=ANY_RESPONSE" } // Counts demand data reads have any response type
   */
};

vector< const char* > pmcFixNotes =
{
    "INST_RETIRED.ANY",
    "CPU_CLK_UNHALTED.THREAD",
    "CPU_CLK_UNHALTED.REF_TSC"
};

#define APIC_BASE_ADDRESS 0xfee00000  // Base address for the APIC
#define APIC_SVR_OFFSET   0xF0        // Offset for the spurious-interrupt vector register

void disable_apic( int cpu )
{
    uint64_t apic = read_msr_f( cpu, 0x1b );
    apic &= ~((1<<11)|(1<<10));
    write_msr_f( cpu, 0x1b, apic );
}

